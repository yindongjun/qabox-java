/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fluentqa.alt.client.model;

import org.junit.Test;


/**
 * Model tests for TemplatesTemplateIdAddFieldsFields
 */
public class TemplatesTemplateIdAddFieldsFieldsTest {
    private final TemplatesTemplateIdAddFieldsFields model = new TemplatesTemplateIdAddFieldsFields();

    /**
     * Model tests for TemplatesTemplateIdAddFieldsFields
     */
    @Test
    public void testTemplatesTemplateIdAddFieldsFields() {
        // TODO: test TemplatesTemplateIdAddFieldsFields
    }

    /**
     * Test the property 'alignment'
     */
    @Test
    public void alignmentTest() {
        // TODO: test alignment
    }

    /**
     * Test the property 'autoCalculateMaxLength'
     */
    @Test
    public void autoCalculateMaxLengthTest() {
        // TODO: test autoCalculateMaxLength
    }

    /**
     * Test the property 'backgroundColor'
     */
    @Test
    public void backgroundColorTest() {
        // TODO: test backgroundColor
    }

    /**
     * Test the property 'backgroundColorFieldName'
     */
    @Test
    public void backgroundColorFieldNameTest() {
        // TODO: test backgroundColorFieldName
    }

    /**
     * Test the property 'backgroundColorFieldRequired'
     */
    @Test
    public void backgroundColorFieldRequiredTest() {
        // TODO: test backgroundColorFieldRequired
    }

    /**
     * Test the property 'barcodeSymbology'
     */
    @Test
    public void barcodeSymbologyTest() {
        // TODO: test barcodeSymbology
    }

    /**
     * Test the property 'bold'
     */
    @Test
    public void boldTest() {
        // TODO: test bold
    }

    /**
     * Test the property 'characterSpacing'
     */
    @Test
    public void characterSpacingTest() {
        // TODO: test characterSpacing
    }

    /**
     * Test the property 'checkCharacter'
     */
    @Test
    public void checkCharacterTest() {
        // TODO: test checkCharacter
    }

    /**
     * Test the property 'checkColor'
     */
    @Test
    public void checkColorTest() {
        // TODO: test checkColor
    }

    /**
     * Test the property 'checkColorFieldName'
     */
    @Test
    public void checkColorFieldNameTest() {
        // TODO: test checkColorFieldName
    }

    /**
     * Test the property 'checkColorFieldRequired'
     */
    @Test
    public void checkColorFieldRequiredTest() {
        // TODO: test checkColorFieldRequired
    }

    /**
     * Test the property 'color'
     */
    @Test
    public void colorTest() {
        // TODO: test color
    }

    /**
     * Test the property 'colorFieldName'
     */
    @Test
    public void colorFieldNameTest() {
        // TODO: test colorFieldName
    }

    /**
     * Test the property 'colorFieldRequired'
     */
    @Test
    public void colorFieldRequiredTest() {
        // TODO: test colorFieldRequired
    }

    /**
     * Test the property 'comb'
     */
    @Test
    public void combTest() {
        // TODO: test comb
    }

    /**
     * Test the property 'combNumberOfCells'
     */
    @Test
    public void combNumberOfCellsTest() {
        // TODO: test combNumberOfCells
    }

    /**
     * Test the property 'combValueOffset'
     */
    @Test
    public void combValueOffsetTest() {
        // TODO: test combValueOffset
    }

    /**
     * Test the property 'combinedFieldFormat'
     */
    @Test
    public void combinedFieldFormatTest() {
        // TODO: test combinedFieldFormat
    }

    /**
     * Test the property 'combinedFieldNames'
     */
    @Test
    public void combinedFieldNamesTest() {
        // TODO: test combinedFieldNames
    }

    /**
     * Test the property 'combinedFieldSeparator'
     */
    @Test
    public void combinedFieldSeparatorTest() {
        // TODO: test combinedFieldSeparator
    }

    /**
     * Test the property 'combinedFieldType'
     */
    @Test
    public void combinedFieldTypeTest() {
        // TODO: test combinedFieldType
    }

    /**
     * Test the property 'condition'
     */
    @Test
    public void conditionTest() {
        // TODO: test condition
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'dateTimeFormat'
     */
    @Test
    public void dateTimeFormatTest() {
        // TODO: test dateTimeFormat
    }

    /**
     * Test the property 'decimalPlaces'
     */
    @Test
    public void decimalPlacesTest() {
        // TODO: test decimalPlaces
    }

    /**
     * Test the property '_default'
     */
    @Test
    public void _defaultTest() {
        // TODO: test _default
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'displayType'
     */
    @Test
    public void displayTypeTest() {
        // TODO: test displayType
    }

    /**
     * Test the property 'exclusiveMaximum'
     */
    @Test
    public void exclusiveMaximumTest() {
        // TODO: test exclusiveMaximum
    }

    /**
     * Test the property 'exclusiveMinimum'
     */
    @Test
    public void exclusiveMinimumTest() {
        // TODO: test exclusiveMinimum
    }

    /**
     * Test the property 'falseText'
     */
    @Test
    public void falseTextTest() {
        // TODO: test falseText
    }

    /**
     * Test the property 'fontSize'
     */
    @Test
    public void fontSizeTest() {
        // TODO: test fontSize
    }

    /**
     * Test the property 'height'
     */
    @Test
    public void heightTest() {
        // TODO: test height
    }

    /**
     * Test the property 'hidden'
     */
    @Test
    public void hiddenTest() {
        // TODO: test hidden
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'imageGravity'
     */
    @Test
    public void imageGravityTest() {
        // TODO: test imageGravity
    }

    /**
     * Test the property 'imageScaleType'
     */
    @Test
    public void imageScaleTypeTest() {
        // TODO: test imageScaleType
    }

    /**
     * Test the property 'includeTime'
     */
    @Test
    public void includeTimeTest() {
        // TODO: test includeTime
    }

    /**
     * Test the property 'integer'
     */
    @Test
    public void integerTest() {
        // TODO: test integer
    }

    /**
     * Test the property 'invertBooleanCondition'
     */
    @Test
    public void invertBooleanConditionTest() {
        // TODO: test invertBooleanCondition
    }

    /**
     * Test the property 'maxLength'
     */
    @Test
    public void maxLengthTest() {
        // TODO: test maxLength
    }

    /**
     * Test the property 'maximum'
     */
    @Test
    public void maximumTest() {
        // TODO: test maximum
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'minLength'
     */
    @Test
    public void minLengthTest() {
        // TODO: test minLength
    }

    /**
     * Test the property 'minimum'
     */
    @Test
    public void minimumTest() {
        // TODO: test minimum
    }

    /**
     * Test the property 'multiline'
     */
    @Test
    public void multilineTest() {
        // TODO: test multiline
    }

    /**
     * Test the property 'multilineLines'
     */
    @Test
    public void multilineLinesTest() {
        // TODO: test multilineLines
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'numberConditionRangeExclusiveMax'
     */
    @Test
    public void numberConditionRangeExclusiveMaxTest() {
        // TODO: test numberConditionRangeExclusiveMax
    }

    /**
     * Test the property 'numberConditionRangeExclusiveMin'
     */
    @Test
    public void numberConditionRangeExclusiveMinTest() {
        // TODO: test numberConditionRangeExclusiveMin
    }

    /**
     * Test the property 'numberConditionRangeMax'
     */
    @Test
    public void numberConditionRangeMaxTest() {
        // TODO: test numberConditionRangeMax
    }

    /**
     * Test the property 'numberConditionRangeMin'
     */
    @Test
    public void numberConditionRangeMinTest() {
        // TODO: test numberConditionRangeMin
    }

    /**
     * Test the property 'numberConditionType'
     */
    @Test
    public void numberConditionTypeTest() {
        // TODO: test numberConditionType
    }

    /**
     * Test the property 'opacity'
     */
    @Test
    public void opacityTest() {
        // TODO: test opacity
    }

    /**
     * Test the property 'optionList'
     */
    @Test
    public void optionListTest() {
        // TODO: test optionList
    }

    /**
     * Test the property 'overflow'
     */
    @Test
    public void overflowTest() {
        // TODO: test overflow
    }

    /**
     * Test the property 'page'
     */
    @Test
    public void pageTest() {
        // TODO: test page
    }

    /**
     * Test the property 'placeholder'
     */
    @Test
    public void placeholderTest() {
        // TODO: test placeholder
    }

    /**
     * Test the property 'qrcodeColor'
     */
    @Test
    public void qrcodeColorTest() {
        // TODO: test qrcodeColor
    }

    /**
     * Test the property 'qrcodeColorFieldName'
     */
    @Test
    public void qrcodeColorFieldNameTest() {
        // TODO: test qrcodeColorFieldName
    }

    /**
     * Test the property 'qrcodeColorFieldRequired'
     */
    @Test
    public void qrcodeColorFieldRequiredTest() {
        // TODO: test qrcodeColorFieldRequired
    }

    /**
     * Test the property 'required'
     */
    @Test
    public void requiredTest() {
        // TODO: test required
    }

    /**
     * Test the property 'rotation'
     */
    @Test
    public void rotationTest() {
        // TODO: test rotation
    }

    /**
     * Test the property 'shapeBorderColor'
     */
    @Test
    public void shapeBorderColorTest() {
        // TODO: test shapeBorderColor
    }

    /**
     * Test the property 'shapeBorderColorFieldName'
     */
    @Test
    public void shapeBorderColorFieldNameTest() {
        // TODO: test shapeBorderColorFieldName
    }

    /**
     * Test the property 'shapeBorderColorFieldRequired'
     */
    @Test
    public void shapeBorderColorFieldRequiredTest() {
        // TODO: test shapeBorderColorFieldRequired
    }

    /**
     * Test the property 'shapeBorderWidth'
     */
    @Test
    public void shapeBorderWidthTest() {
        // TODO: test shapeBorderWidth
    }

    /**
     * Test the property 'shapeFillColor'
     */
    @Test
    public void shapeFillColorTest() {
        // TODO: test shapeFillColor
    }

    /**
     * Test the property 'shapeFillColorFieldName'
     */
    @Test
    public void shapeFillColorFieldNameTest() {
        // TODO: test shapeFillColorFieldName
    }

    /**
     * Test the property 'shapeFillColorFieldRequired'
     */
    @Test
    public void shapeFillColorFieldRequiredTest() {
        // TODO: test shapeFillColorFieldRequired
    }

    /**
     * Test the property 'shapeType'
     */
    @Test
    public void shapeTypeTest() {
        // TODO: test shapeType
    }

    /**
     * Test the property 'signatureAllowDraw'
     */
    @Test
    public void signatureAllowDrawTest() {
        // TODO: test signatureAllowDraw
    }

    /**
     * Test the property 'signatureAllowType'
     */
    @Test
    public void signatureAllowTypeTest() {
        // TODO: test signatureAllowType
    }

    /**
     * Test the property '_static'
     */
    @Test
    public void _staticTest() {
        // TODO: test _static
    }

    /**
     * Test the property 'strikethrough'
     */
    @Test
    public void strikethroughTest() {
        // TODO: test strikethrough
    }

    /**
     * Test the property 'stringConditionType'
     */
    @Test
    public void stringConditionTypeTest() {
        // TODO: test stringConditionType
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'trueText'
     */
    @Test
    public void trueTextTest() {
        // TODO: test trueText
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'typeface'
     */
    @Test
    public void typefaceTest() {
        // TODO: test typeface
    }

    /**
     * Test the property 'uppercase'
     */
    @Test
    public void uppercaseTest() {
        // TODO: test uppercase
    }

    /**
     * Test the property 'vAlignment'
     */
    @Test
    public void vAlignmentTest() {
        // TODO: test vAlignment
    }

    /**
     * Test the property 'width'
     */
    @Test
    public void widthTest() {
        // TODO: test width
    }

    /**
     * Test the property 'x'
     */
    @Test
    public void xTest() {
        // TODO: test x
    }

    /**
     * Test the property 'y'
     */
    @Test
    public void yTest() {
        // TODO: test y
    }

}
