{
  "data": [{"tplId":3,"groupId":3,"title":"entitydto(lombok+swagger)","content":"import io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.io.Serializable;\nimport lombok.Data;\n{{#each tableInfo.importPackages}}\nimport {{this}};\n{{/each}}\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Data\n@ApiModel(\"{{tableInfo.comment}}\")\npublic class {{tableInfo.entityName}} implements Serializable {\n{{#each tableInfo.fields}}\n    /**\n     * {{this.comment}}\n     */\n    @ApiModelProperty(\"{{this.comment}}\")\n    private {{this.propertyType}} {{this.propertyName}};\n{{/each}}\n\n    public {{tableInfo.entityName}}(){\n    }\n\n}","suffix":"{{tableInfo.entityName}}.java","createBy":22042,"updateBy":22042,"createTime":"2020-06-09 11:07:13","updateTime":"2020-06-09 11:07:18","groupAccess":"system","groupName":"通用实体"},{"tplId":12,"groupId":3,"title":"entity(setter/getter)","content":"import java.io.Serializable;\n{{#each tableInfo.importPackages}}\nimport {{this}};\n{{/each}}\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\npublic class {{tableInfo.entityName}} implements Serializable {\n{{#each tableInfo.fields}}\n    /**\n     * {{this.comment}}\n     */\n    private {{this.propertyType}} {{this.propertyName}};\n{{/each}}\n\n{{#each tableInfo.fields}}\n    public {{this.propertyType}} get{{this.capitalName}}(){\n        return this.{{this.propertyName}};\n    }\n\n{{/each}}\n{{#each tableInfo.fields}}\n    public void set{{this.capitalName}}({{this.propertyType}} {{this.propertyName}}){\n        this.{{this.propertyName}} = {{this.propertyName}};\n    }\n\n{{/each}}\n}","suffix":"{{tableInfo.entityName}}.java","createBy":22042,"updateBy":22042,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"通用实体"},{"tplId":13,"groupId":3,"title":"entity(lombok)","content":"import java.io.Serializable;\nimport lombok.Data;\n{{#each tableInfo.importPackages}}\nimport {{this}};\n{{/each}}\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Data\npublic class {{tableInfo.entityName}} implements Serializable {\n    {{#each tableInfo.fields}}\n    /**\n     * {{this.comment}}\n     */\n    private {{this.propertyType}} {{this.propertyName}};\n    {{/each}}\n}","suffix":"{{tableInfo.entityName}}.java","createBy":22042,"updateBy":22042,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"通用实体"},{"tplId":14,"groupId":4,"title":"mybatis","content":"<mapper namespace=\"{{packageInfo.Mapper}}.{{tableInfo.entityName}}Mapper\">\n    <resultMap id=\"BaseResultMap\" type=\"{{packageInfo.Entity}}.{{tableInfo.entityName}}\" >\n        {{#each tableInfo.fields}}\n        <result column=\"{{this.name}}\" property=\"{{this.propertyName}}\" />\n        {{/each}}\n    </resultMap>\n\n    <sql id=\"Base_Column_List\">\n        {{tableInfo.fieldNames}}\n    </sql>\n\n    <delete id=\"delete\" >\n        DELETE FROM userinfo\n        WHERE id = #{id}\n    </delete>\n\n    <update id=\"update\" parameterType=\"{{packageInfo.Entity}}.{{tableInfo.entityName}}\">\n        UPDATE {{tableInfo.name}}\n        <set>\n            {{#each tableInfo.fields}}\n            <if test ='null != {{this.propertyName}}'>{{this.name}} = #{ {{this.propertyName}} },</if>\n            {{/each}}\n        </set>\n        WHERE id = #{id}\n    </update>\n\n    <select id=\"load\" resultMap=\"BaseResultMap\">\n        SELECT <include refid=\"Base_Column_List\" />\n        FROM {{tableInfo.name}}\n        WHERE {{#each tableInfo.fields}}{{this.name}} = ? {{EachLastElementExpression \"\" \",\"}}{{/each}}\n    </select>\n\n    <select id=\"pageList\" resultMap=\"BaseResultMap\">\n        SELECT\n        <include refid=\"Base_Column_List\" />\n        FROM {{tableInfo.name}}\n        LIMIT #{offset}, #{pageSize}\n    </select>\n    <select id=\"totalCount\" resultType=\"java.lang.Integer\">\n        SELECT count(1)\n        FROM {{tableInfo.name}}\n    </select>\n</mapper>","suffix":"{{tableInfo.entityName}}Mapper.xml","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis"},{"tplId":15,"groupId":4,"title":"mapper","content":"import org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\nimport java.util.List;\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Mapper\n@Repository\npublic interface {{tableInfo.entityName}}Mapper {\n\n    /**\n     * 新增\n     */\n    int insert({{tableInfo.entityName}} entity);\n\n    /**\n     * 刪除\n     */\n    int delete(Serializable id);\n\n    /**\n     * 更新\n     */\n    int update({{tableInfo.entityName}} entity);\n\n    /**\n     * 查询 根据主键查询\n     */\n    {{tableInfo.entityName}} load(Serializable id);\n\n    /**\n     * 查询 分页查询\n     */\n    List<{{tableInfo.entityName}}> pageList(int offset, int pagesize, {{tableInfo.entityName}} params);\n\n    /**\n     * 查询 分页查询 count\n     */\n    int pageListCount({{tableInfo.entityName}} params);\n\n}","suffix":"{{tableInfo.entityName}}Mapper.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis"},{"tplId":16,"groupId":4,"title":"service","content":"import java.util.Map;\n\n/**\n * {{tableInfo.comment}} 服务层接口\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\npublic interface {{tableInfo.entityName}}Service {\n\n    /**\n    * 新增\n    */\n    public ReturnT<{{params.empty}}String> insert({{tableInfo.entityName}} entity);\n\n    /**\n    * 删除\n    */\n    public ReturnT<{{params.empty}}String> delete(Serializable id);\n\n    /**\n    * 更新\n    */\n    public ReturnT<{{params.empty}}String> update({{tableInfo.entityName}} entity);\n\n    /**\n    * 根据主键 id 查询\n    */\n    public {{tableInfo.entityName}} load(Serializable id);\n\n    /**\n    * 分页查询\n    */\n    public Map<{{params.empty}}String,Object> pageList(int offset, int pagesize, {{tableInfo.entityName}} params);\n\n}","suffix":"I{{tableInfo.entityName}}Service.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis"},{"tplId":17,"groupId":4,"title":"service_impl","content":"import org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * {{tableInfo.comment}} 服务层实现\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Service\npublic class {{tableInfo.entityName}}ServiceImpl implements {{tableInfo.entityName}}Service {\n\n    @Resource\n    private {{tableInfo.entityName}}Mapper mapper;\n\n    @Override\n    public ReturnT<{{params.empty}}String> insert({{tableInfo.entityName}} entity) {\n\n        // valid\n        if (entity == null) {\n            return new ReturnT<{{params.empty}}String>(ReturnT.FAIL_CODE, \"必要参数缺失\");\n        }\n\n        mapper.insert(entity);\n        return ReturnT.SUCCESS;\n    }\n\n    @Override\n    public ReturnT<{{params.empty}}String> delete(Serializable id) {\n        int ret = mapper.delete(id);\n        return ret > 0 ? ReturnT.SUCCESS : ReturnT.FAIL;\n    }\n\n    @Override\n    public ReturnT<{{params.empty}}String> update({{tableInfo.entityName}} entity) {\n        int ret = mapper.update(entity);\n        return ret > 0 ? ReturnT.SUCCESS : ReturnT.FAIL;\n    }\n\n    @Override\n    public {{tableInfo.entityName}} load(Serializable id) {\n        return mapper.load(id);\n    }\n\n    @Override\n    public Map<{{params.empty}}String,Object> pageList(int offset, int pagesize, {{tableInfo.entityName}} params) {\n\n        int totalCount = mapper.pageListCount(params);\n        List<{{tableInfo.entityName}}> pageList = totalCount > 0 ? mapper.pageList(offset, pagesize, params) : new ArrayList<{{tableInfo.entityName}}>();\n        // result\n        Map<{{params.empty}}String, Object> result = new HashMap<{{params.empty}}String, Object>();\n        result.put(\"pageList\", pageList);\n        result.put(\"totalCount\", totalCount);\n\n        return result;\n    }\n\n}","suffix":"{{tableInfo.entityName}}ServiceImpl.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis"},{"tplId":18,"groupId":4,"title":"controller","content":"import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * {{tableInfo.entityName}} 控制层\n * @Description: {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@RestController\n@RequestMapping(\"/{{tableInfo.entityPath}}Controller\")\npublic class {{tableInfo.entityName}}Controller {\n\n    @Resource\n    private {{tableInfo.entityName}}Service service;\n\n    /**\n     * 新增\n     */\n    @RequestMapping(\"/insert\")\n    public ReturnT<{{params.empty}}String> insert({{tableInfo.entityName}} entity){\n        return service.insert(entity);\n    }\n\n    /**\n     * 刪除\n     */\n    @RequestMapping(\"/delete\")\n    public ReturnT<{{params.empty}}String> delete(Serializable id){\n        return service.delete(id);\n    }\n\n    /**\n     * 更新\n     */\n    @RequestMapping(\"/update\")\n    public ReturnT<{{params.empty}}String> update({{tableInfo.entityName}} entity){\n        return service.update(entity);\n    }\n\n    /**\n     * 查询 根据主键 id 查询\n     */\n    @RequestMapping(\"/load\")\n    public ReturnT<{{params.empty}}String> load(Serializable id){\n        return service.load(id);\n    }\n\n    /**\n     * [查询] 分页查询\n     */\n    @RequestMapping(\"/pageList\")\n    public Map<{{params.empty}}String, Object> pageList(@RequestParam(required = false, defaultValue = \"0\") int offset, @RequestParam(required = false, defaultValue = \"10\") int pagesize, {{tableInfo.entityName}} params) {\n        return service.pageList(offset, pagesize, params);\n    }\n\n}","suffix":"{{tableInfo.entityName}}Controller.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis"},{"tplId":19,"groupId":5,"title":"mapper","content":"import com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.springframework.stereotype.Repository;\n\n/**\n *\n * @Description: {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Repository\npublic interface {{tableInfo.entityName}}Mapper extends BaseMapper<{{tableInfo.entityName}}> {\n\n}","suffix":"{{tableInfo.entityName}}Mapper.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis Plus"},{"tplId":20,"groupId":5,"title":"controller","content":"import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * {{tableInfo.entityName}} 控制层\n * @Description: {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@RestController\n@RequestMapping(\"/{{tableInfo.entityPath}}Controller\")\npublic class {{tableInfo.entityName}}Controller {\n\n    @Autowired\n    private {{tableInfo.entityName}}Mapper mapper;\n\n    /**\n     * 新增或编辑\n     * @param entity\n     * @return {@link Object}\n     */\n    @PostMapping(\"/save\")\n    public Object save({{tableInfo.entityName}} entity){\n        {{#each tableInfo.fields}}\n        {{#if this.keyIdentityFlag}}\n        entity = mapper.selectOne(new QueryWrapper<{{tableInfo.entityName}}>().eq(\"{{this.propertyName}}\", entity.get{{this.capitalName}}))\n        {{/if}}\n        {{/each}}\n        if(entity != null){\n            mapper.updateById(entity);\n        }else{\n            mapper.insert(entity);\n        }\n        return Result.success(entity);\n    }\n\n    /**\n     * 删除\n     * @param userInfo\n     * @return {@link Object}\n     */\n    @PostMapping(\"/delete\")\n    public Object delete(Serializable id) {\n        {{tableInfo.entityName}} entity = null;\n        {{#each tableInfo.fields}}\n        {{#if this.keyIdentityFlag}}\n        entity = mapper.selectOne(new QueryWrapper<{{tableInfo.entityName}}>().eq(\"{{this.propertyName}}\", id)\n        {{/if}}\n        {{/each}}\n        if(entity != null){\n            return Result.success(entity);\n        }else{\n            return Result.error(\"没有找到该对象\");\n        }\n    }\n\n    /**\n     * 查询\n     * @param id\n     * @return {@link Object}\n     */\n    @PostMapping(\"/find\")\n    public Object find(Serializable id){\n        {{tableInfo.entityName}} entity = null;\n        {{#each tableInfo.fields}}\n        {{#if this.keyIdentityFlag}}\n        entity = mapper.selectOne(new QueryWrapper<{{tableInfo.entityName}}>().eq(\"{{this.propertyName}}\", id)\n        {{/if}}\n        {{/each}}\n        if(entity != null){\n            return Result.success(entity);\n        }else{\n            return Result.error(\"没有找到该对象\");\n        }\n    }\n\n    /**\n    * 分页查询\n    * @param entity\n    * @return {@link Object}\n    */\n    @PostMapping(\"/list\")\n    public Object list({tableInfo.entityName}} entity, @RequestParam(required = false, defaultValue = \"0\") int pageNumber, @RequestParam(required = false, defaultValue = \"10\") int pageSize) {\n        // 分页构造器\n        Page<{tableInfo.entityName}}> page = new Page<{tableInfo.entityName}}>(pageNumber,pageSize);\n        // 条件构造器\n        QueryWrapper<{tableInfo.entityName}}> queryWrapper = new QueryWrapper<{tableInfo.entityName}}>(entity);\n        // 执行分页\n        IPage<{tableInfo.entityName}}> pageList = certPersonMapper.selectPage(page, queryWrapper);\n        // 返回结果\n        return Result.success(pageList);\n    }\n\n}","suffix":"{{tableInfo.entityName}}Controller.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"Mybatis Plus"},{"tplId":21,"groupId":6,"title":"jpa_entity","content":"import java.io.Serializable;\nimport javax.persistence.*;\nimport lombok.Data;\n{{#each tableInfo.importPackages}}\nimport {{this}};\n{{/each}}\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Entity\n@Data\n@Table(name=\"{{tableInfo.name}}\")\npublic class {{tableInfo.entityName}} implements Serializable {\n    {{#each tableInfo.fields}}\n    /**\n    * {{this.comment}}\n    */\n    {{#if this.keyIdentityFlag}}\n    @Id\n    @GeneratedValue\n    {{/if}}\n    private {{this.propertyType}} {{this.propertyName}};\n    {{/each}}\n}","suffix":"{{tableInfo.entityName}}.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JPA"},{"tplId":22,"groupId":6,"title":"repository","content":"import java.util.List;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Repository\npublic interface {{tableInfo.entityName}}Repository extends JpaRepository<{{tableInfo.entityName}} , Serializable> {\n\n}","suffix":"{{tableInfo.entityName}}Repository.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JPA"},{"tplId":23,"groupId":6,"title":"controller","content":"import org.springframework.data.domain.Example;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.data.domain.ExampleMatcher;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n *\n * @Description: {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@RestController\n@RequestMapping(\"/{{tableInfo.entityName}}\")\npublic class {{tableInfo.entityName}}Controller {\n\n    @Autowired\n    private {{tableInfo.entityName}}Repository repository;\n\n    /**\n     * 新增或编辑\n     * @param entity\n     * @return {@link Object}\n     */\n    @PostMapping(\"/save\")\n    public Object save({{tableInfo.entityName}} entity){\n        return repository.save(entity);\n    }\n\n    /**\n     * 删除\n     * @param id\n     * @return {@link Object}\n     */\n    @PostMapping(\"/delete\")\n    public Object delete(Serializable id){\n        Optional<{{tableInfo.entityName}}> entity = repository.findById(id);\n        if(entity.isPresent()){\n            repository.deleteById(id);\n            return Result.success(\"删除成功\");\n        }else{\n            return Result.error(\"没有找到该对象\");\n        }\n    }\n\n    /**\n     * 查询\n     * @param id\n     * @return {@link Object}\n     */\n    @PostMapping(\"/find\")\n    public Object find(Serializable id) {\n        Optional<{{tableInfo.entityName}}> entity = repository.findById(id);\n        if(entity.isPresent()){\n            return Result.success(entity);\n        }else{\n            return Result.error(\"没有找到该对象\");\n        }\n    }\n\n    /**\n     * 分页查询\n     * @param entity\n     * @return {@link Object}\n     */\n    @PostMapping(\"/list\")\n    public Object list({{tableInfo.entityName}} entity, @RequestParam(required = false, defaultValue = \"0\") int pageNumber, @RequestParam(required = false, defaultValue = \"10\") int pageSize) {\n        //创建匹配器，需要查询条件请修改此处代码\n        ExampleMatcher matcher = ExampleMatcher.matchingAll();\n        //创建实例\n        Example<{{tableInfo.entityName}}> example = Example.of(entity, matcher);\n        //分页构造\n        Pageable pageable = PageRequest.of(pageNumber,pageSize);\n\n        return repository.findAll(example, pageable);\n    }\n\n}","suffix":"{{tableInfo.entityName}}Controller.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JPA"},{"tplId":24,"groupId":7,"title":"daoimpl","content":"import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.BeanPropertyRowMapper;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * {{tableInfo.comment}} Dao层 实现\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Repository\npublic class {{tableInfo.entityName}}DaoImpl implements I{{tableInfo.entityName}}Dao {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Override\n    public boolean add({{tableInfo.entityName}} entity){\n        return jdbcTemplate.update(\"INSERT INTO {{tableInfo.name}}({{tableInfo.fieldNames}}) VALUES({{#each tableInfo.fields}}?{{EachLastElementExpression \"\" \", \"}}{{/each}})\", {{#each tableInfo.fields}}entity.get{{this.capitalName}}(){{EachLastElementExpression \"\" \", \"}}{{/each}}) > 0;\n    }\n\n    @Override\n    public boolean update({{tableInfo.entityName}} entity) {\n        return jdbcTemplate.update(\"UPDATE {{tableInfo.name}} SET {{#each tableInfo.fields}}{{this.name}} = ? {{EachLastElementExpression \"\" \",\"}}{{/each}} WHERE {{tableInfo.keyIdentityFiled.name}} = ?\", {{#each tableInfo.fields}}entity.get{{this.capitalName}}(){{EachLastElementExpression \"\" \", \"}}{{/each}}, entity.get{{tableInfo.keyIdentityFiled.capitalName}}()) > 0;\n    }\n\n    @Override\n    public boolean delete({{tableInfo.entityName}} entity){\n        return jdbcTemplate.update(\"DELETE FROM {{tableInfo.name}} WHERE {{tableInfo.keyIdentityFiled.name}} = ?\", entity.get{{tableInfo.keyIdentityFiled.capitalName}}()) > 0;\n    }\n\n    @Override\n    public {{tableInfo.entityName}} get(Serializable id) {\n        List<{{tableInfo.entityName}}> list = jdbcTemplate.query(\"SELECT {{tableInfo.fieldNames}} FROM {{tableInfo.name}} WHERE {{tableInfo.keyIdentityFiled.name}} = ? \", new Object[]{ id }, new BeanPropertyRowMapper<{{tableInfo.entityName}}>({{tableInfo.entityName}}.class));\n        if(list != null && list.size() > 0) {\n            return list.get(0);\n        }\n        return null;\n    }\n\n    @Override\n    public List<{{tableInfo.entityName}}> findAll(Map< String, Object> params) {\n        List<{{tableInfo.entityName}}> list = jdbcTemplate.query(\"SELECT {{tableInfo.fieldNames}} FROM {{tableInfo.name}} WHERE 1=1 \", new Object[]{}, new BeanPropertyRowMapper<{{tableInfo.entityName}}>({{tableInfo.entityName}}.class));\n        if(list != null && list.size() > 0) {\n            return list;\n        }else{\n            return new ArrayList<>();\n        }\n    }\n\n    @Override\n    public boolean batchDelete(List ids) {\n        String sql=\"DELETE FROM {{tableInfo.name}} WHERE {{tableInfo.keyIdentityFiled.name}} = ?\";\n        List< Object[] > batchArgs = new ArrayList<>();\n        for(Object id : ids) {\n            batchArgs.add(new Object[]{id});\n        }\n        return jdbcTemplate.batchUpdate(sql, batchArgs).length == ids.size();\n    }\n\n    @Override\n    public Page<{{tableInfo.entityName}}> query(Page page, {{tableInfo.entityName}} params) {\n        if (page == null) {\n            page = new Page();\n        }\n        List< Object > args = new ArrayList<>();\n        StringBuilder where = new StringBuilder();\n        // 查询参数 处理\n        Long total = jdbcTemplate.queryForObject(new StringBuffer(\"SELECT COUNT(1) FROM {{tableInfo.name}} WHERE 1=1 \").append(where).toString(), Long.class, args.toArray());\n        if (total != null && total > 0) {\n            args.add((page.getPageNo() - 1) * page.getLimit());\n            args.add(page.getLimit());\n            List<{{tableInfo.entityName}}> list = jdbcTemplate.query(new StringBuffer(\"SELECT {{tableInfo.fieldNames}} FROM {{tableInfo.name}} WHERE 1=1 \")\n                .append(where).append(\" LIMIT ?,?\").toString(), args.toArray(), new BeanPropertyRowMapper<>({{tableInfo.entityName}}.class));\n            if(list != null && list.size() > 0) {\n                page.setRecords(list);\n            }\n        }\n        page.setTotal(total);\n        return page;\n    }\n}","suffix":"{{tableInfo.entityName}}DaoImpl.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JdbcTemplate"},{"tplId":25,"groupId":7,"title":"dao","content":"import java.util.List;\n\n/**\n * {{tableInfo.comment}} Dao层接口\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\npublic interface I{{tableInfo.entityName}}Dao {\n    /**\n     * 新增 - {{tableInfo.comment}}\n     */\n    boolean add({{tableInfo.entityName}} entity);\n\n    /**\n     * 修改 - {{tableInfo.comment}}\n     */\n    boolean update({{tableInfo.entityName}} entity);\n\n    /**\n     * 删除 - {{tableInfo.comment}}\n     */\n    boolean delete({{tableInfo.entityName}} entity);\n\n    /**\n     * 根据主键 获取记录\n     */\n    {{tableInfo.entityName}} get(Serializable id);\n\n    /**\n     * 根据条件查询所有记录\n     */\n    List<{{tableInfo.entityName}}> findAll(Map< String, Object> params);\n\n    boolean batchDelete(List ids);\n\n    /**\n     * 分页查询处理\n     * @param page\n     * @param params\n     * @return\n     */\n    Page<{{tableInfo.entityName}}> query(Page page, {{tableInfo.entityName}} params);\n}","suffix":"I{{tableInfo.entityName}}Dao.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JdbcTemplate"},{"tplId":26,"groupId":7,"title":"service","content":"import com.hoo.common.model.Page;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * {{tableInfo.comment}} 服务接口\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\npublic interface I{{tableInfo.entityName}}Service {\n\n    /**\n    * 新增\n    * @param entity\n    * @return\n    */\n    boolean save({{tableInfo.entityName}} entity);\n\n    /**\n    * 删除\n    * @param ids\n    * @return\n    */\n    boolean delete(List ids);\n\n    /**\n    * 修改\n    * @param entity\n    * @return\n    */\n    boolean update({{tableInfo.entityName}} entity);\n\n    /**\n    * 分页查询\n    * @param page\n    * @param params\n    * @return\n    */\n    Page query(Page page, {{tableInfo.entityName}} params);\n\n}","suffix":"I{{tableInfo.entityName}}Service.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JdbcTemplate"},{"tplId":27,"groupId":7,"title":"serviceimpl","content":"import com.hoo.common.model.Page;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * {{tableInfo.comment}} 服务实现类\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Service\npublic class {{tableInfo.entityName}}ServiceImpl implements I{{tableInfo.entityName}}Service {\n\n    @Autowired I{{tableInfo.entityName}}Dao iDao;\n\n    @Override\n    public boolean save({{tableInfo.entityName}} entity) {\n        return iDao.add(entity);\n    }\n\n    @Override\n    public boolean delete(List ids) {\n        return iDao.batchDelete(ids);\n    }\n\n    @Override\n    public boolean update({{tableInfo.entityName}} entity) {\n        return iDao.update(entity);\n    }\n\n    @Override\n    public Page query(Page page, {{tableInfo.entityName}} params) {\n        if(page == null) {\n            page = new Page();\n        }\n        iDao.query(page, params);\n        return page;\n    }\n}\n","suffix":"{{tableInfo.entityName}}ServiceImpl.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"JdbcTemplate"},{"tplId":28,"groupId":8,"title":"select","content":"SELECT\n{{#each tableInfo.fields}}\n    {{this.name}} {{EachLastElementExpression \"\" \",\"}}\n{{/each}}\nFROM {{tableInfo.name}}\nWHERE 1 = 1\n{{#each tableInfo.fields}}\n  AND {{this.name}} = ?\n{{/each}}","suffix":"{{tableInfo.entityName}}.select.sql","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"标准SQL"},{"tplId":29,"groupId":8,"title":"insert","content":"INSERT INTO {{tableInfo.name}}({{#each tableInfo.fields}}{{this.name}}{{EachLastElementExpression \"\" \",\"}}{{/each}})\nVALUES({{#each tableInfo.fields}}? {{EachLastElementExpression \"\" \",\"}}{{/each}})","suffix":"{{tableInfo.entityName}}.insert.sql","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"标准SQL"},{"tplId":30,"groupId":8,"title":"update","content":"UPDATE {{tableInfo.name}}\nSET {{#each tableInfo.fields}}{{this.name}} = ? {{EachLastElementExpression \"\" \",\"}}{{/each}}\nWHERE {{#each tableInfo.fields}}{{this.name}} = ? {{EachLastElementExpression \"\" \",\"}}{{/each}}","suffix":"{{tableInfo.entityName}}.update.sql","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"标准SQL"},{"tplId":31,"groupId":8,"title":"delete","content":"DELETE FROM {{tableInfo.name}}\nWHERE {{#each tableInfo.fields}}{{this.name}} = ? {{EachLastElementExpression \"\" \",\"}}{{/each}}","suffix":"{{tableInfo.entityName}}.delete.sql","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"标准SQL"},{"tplId":32,"groupId":12,"title":"swagger ui","content":"@ApiOperation(value = \"{{tableInfo.comment}}\", notes = \"{{tableInfo.comment}}\")\n\n@ApiImplicitParams({\n{{#each tableInfo.fields}}\n    @ApiImplicitParam(name = \"{{this.propertyName}}\", value = \"{{this.comment}}\", required = false, dataType = \"{{this.propertyType}}\"){{EachLastElementExpression \"\" \",\"}}\n{{/each}}\n})","suffix":"{{tableInfo.entityName}}Controller.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"UI选择"},{"tplId":33,"groupId":12,"title":"element ui","content":"<el-form :inline=\"true\" :model=\"submitData\" class=\"demo-form-inline\" :rules=\"rules\" ref=\"ruleForm\">\n        <el-card class=\"box-card\">\n            <div slot=\"header\" class=\"header clearfix\">\n                <span>{{tableInfo.comment}}</span>\n                <el-button v-if=\"!ischeck && !isFind\" class=\"fr\" type=\"primary\" @click=\"validate('ruleForm')\">提交</el-button>\n                <el-button v-else class=\"fr\" type=\"primary\" @click=\"goBack\">返回</el-button>\n            </div>\n            {{#each tableInfo.fields}}\n            <el-form-item label=\"{{this.comment}}\" prop=\"{{this.propertyName}}\">\n                <el-input placeholder=\"请输入{{this.comment}}\" v-model=\"submitData.{{this.propertyName}}\"></el-input>\n            </el-form-item>\n            {{/each}}\n        </el-card>\n    </el-form>","suffix":"{{tableInfo.entityName}}.vue","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"UI选择"},{"tplId":34,"groupId":12,"title":"bootstrap ui","content":"<form action=\"/userInfoController/saveUserInfo\">\n    {{#each tableInfo.fields}}\n    <div class=\"form-group\">\n        <label for=\"{{this.propertyName}}\">{{this.comment}}</label>\n        <input type=\"input\" class=\"form-control\" id=\"{{this.propertyName}}\" name=\"{{this.propertyName}}\" placeholder=\"请输入{{this.comment}}\">\n    </div>\n    {{/each}}\n    <button type=\"submit\" class=\"btn btn-primary\">保存</button>\n</form>","suffix":"{{tableInfo.entityName}}.html","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"UI选择"},{"tplId":35,"groupId":13,"title":"entitydto(lombok+swagger)","content":"import io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.io.Serializable;\nimport lombok.Data;\n{{#each tableInfo.importPackages}}\nimport {{this}};\n{{/each}}\n\n/**\n * {{tableInfo.comment}}\n * @author {{globalConfig.author}}\n * @date {{params.date}}\n */\n@Data\n@ApiModel(\"{{tableInfo.comment}}\")\npublic class {{tableInfo.entityName}} implements Serializable {\n{{#each tableInfo.fields}}\n    /**\n     * {{this.comment}}\n     */\n    @ApiModelProperty(\"{{this.comment}}\")\n    private {{this.propertyType}} {{this.propertyName}};\n{{/each}}\n\n    public {{tableInfo.entityName}}(){\n    }\n\n}","suffix":"{{tableInfo.entityName}}.java","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"DTO"},{"tplId":36,"groupId":13,"title":"ValidRuleJson","content":"[{{#each tableInfo.fields}}\n    {\n        \"name\": \"{{this.propertyName}}\",\n        \"desc\": \"{{this.comment}}\",\n        \"validRule\": {\n            \"required\": true{{#if this.length}},\n            \"length\": [1, {{this.length}}]{{/if}}\n        }\n    }{{EachLastElementExpression \"\" \",\"}}{{/each}}\n]","suffix":"{{tableInfo.entityName}}.json","createBy":null,"updateBy":null,"createTime":null,"updateTime":null,"groupAccess":"system","groupName":"DTO"}]
}