/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fluentqa.alt.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.fluentqa.alt.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.fluentqa.alt.client.JSON;

/**
 * TemplatesTemplateIdAddFieldsFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-03-07T00:51:44.596816+08:00[Asia/Hong_Kong]")
public class TemplatesTemplateIdAddFieldsFields {
  /**
   * Gets or Sets alignment
   */
  @JsonAdapter(AlignmentEnum.Adapter.class)
  public enum AlignmentEnum {
    LEFT("left"),
    
    CENTER("center"),
    
    RIGHT("right");

    private String value;

    AlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignmentEnum fromValue(String value) {
      for (AlignmentEnum b : AlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlignmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALIGNMENT = "alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private AlignmentEnum alignment;

  public static final String SERIALIZED_NAME_AUTO_CALCULATE_MAX_LENGTH = "autoCalculateMaxLength";
  @SerializedName(SERIALIZED_NAME_AUTO_CALCULATE_MAX_LENGTH)
  private Boolean autoCalculateMaxLength;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_FIELD_NAME = "backgroundColorFieldName";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_FIELD_NAME)
  private String backgroundColorFieldName;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_FIELD_REQUIRED = "backgroundColorFieldRequired";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_FIELD_REQUIRED)
  private Boolean backgroundColorFieldRequired;

  public static final String SERIALIZED_NAME_BARCODE_SYMBOLOGY = "barcodeSymbology";
  @SerializedName(SERIALIZED_NAME_BARCODE_SYMBOLOGY)
  private String barcodeSymbology;

  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  private Boolean bold;

  public static final String SERIALIZED_NAME_CHARACTER_SPACING = "characterSpacing";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SPACING)
  private BigDecimal characterSpacing;

  /**
   * Gets or Sets checkCharacter
   */
  @JsonAdapter(CheckCharacterEnum.Adapter.class)
  public enum CheckCharacterEnum {
    _10003_("&#10003;"),
    
    _10004_("&#10004;"),
    
    _10006_("&#10006;"),
    
    _10007_("&#10007;"),
    
    _10008_("&#10008;");

    private String value;

    CheckCharacterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckCharacterEnum fromValue(String value) {
      for (CheckCharacterEnum b : CheckCharacterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckCharacterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckCharacterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckCharacterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckCharacterEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHECK_CHARACTER = "checkCharacter";
  @SerializedName(SERIALIZED_NAME_CHECK_CHARACTER)
  private CheckCharacterEnum checkCharacter;

  public static final String SERIALIZED_NAME_CHECK_COLOR = "checkColor";
  @SerializedName(SERIALIZED_NAME_CHECK_COLOR)
  private String checkColor;

  public static final String SERIALIZED_NAME_CHECK_COLOR_FIELD_NAME = "checkColorFieldName";
  @SerializedName(SERIALIZED_NAME_CHECK_COLOR_FIELD_NAME)
  private String checkColorFieldName;

  public static final String SERIALIZED_NAME_CHECK_COLOR_FIELD_REQUIRED = "checkColorFieldRequired";
  @SerializedName(SERIALIZED_NAME_CHECK_COLOR_FIELD_REQUIRED)
  private Boolean checkColorFieldRequired;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_COLOR_FIELD_NAME = "colorFieldName";
  @SerializedName(SERIALIZED_NAME_COLOR_FIELD_NAME)
  private String colorFieldName;

  public static final String SERIALIZED_NAME_COLOR_FIELD_REQUIRED = "colorFieldRequired";
  @SerializedName(SERIALIZED_NAME_COLOR_FIELD_REQUIRED)
  private Boolean colorFieldRequired;

  public static final String SERIALIZED_NAME_COMB = "comb";
  @SerializedName(SERIALIZED_NAME_COMB)
  private Boolean comb;

  public static final String SERIALIZED_NAME_COMB_NUMBER_OF_CELLS = "combNumberOfCells";
  @SerializedName(SERIALIZED_NAME_COMB_NUMBER_OF_CELLS)
  private BigDecimal combNumberOfCells;

  public static final String SERIALIZED_NAME_COMB_VALUE_OFFSET = "combValueOffset";
  @SerializedName(SERIALIZED_NAME_COMB_VALUE_OFFSET)
  private BigDecimal combValueOffset;

  public static final String SERIALIZED_NAME_COMBINED_FIELD_FORMAT = "combinedFieldFormat";
  @SerializedName(SERIALIZED_NAME_COMBINED_FIELD_FORMAT)
  private String combinedFieldFormat;

  public static final String SERIALIZED_NAME_COMBINED_FIELD_NAMES = "combinedFieldNames";
  @SerializedName(SERIALIZED_NAME_COMBINED_FIELD_NAMES)
  private String combinedFieldNames;

  public static final String SERIALIZED_NAME_COMBINED_FIELD_SEPARATOR = "combinedFieldSeparator";
  @SerializedName(SERIALIZED_NAME_COMBINED_FIELD_SEPARATOR)
  private String combinedFieldSeparator;

  public static final String SERIALIZED_NAME_COMBINED_FIELD_TYPE = "combinedFieldType";
  @SerializedName(SERIALIZED_NAME_COMBINED_FIELD_TYPE)
  private String combinedFieldType;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Boolean currency;

  public static final String SERIALIZED_NAME_DATE_TIME_FORMAT = "dateTimeFormat";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FORMAT)
  private String dateTimeFormat;

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  private BigDecimal decimalPlaces;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private String _default;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets displayType
   */
  @JsonAdapter(DisplayTypeEnum.Adapter.class)
  public enum DisplayTypeEnum {
    TEXT("text"),
    
    CHECK("check"),
    
    QRCODE("qrcode"),
    
    BARCODE("barcode"),
    
    IMAGE("image"),
    
    SHAPE("shape");

    private String value;

    DisplayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayTypeEnum fromValue(String value) {
      for (DisplayTypeEnum b : DisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TYPE = "displayType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE)
  private DisplayTypeEnum displayType;

  public static final String SERIALIZED_NAME_EXCLUSIVE_MAXIMUM = "exclusiveMaximum";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_MAXIMUM)
  private Boolean exclusiveMaximum;

  public static final String SERIALIZED_NAME_EXCLUSIVE_MINIMUM = "exclusiveMinimum";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_MINIMUM)
  private Boolean exclusiveMinimum;

  public static final String SERIALIZED_NAME_FALSE_TEXT = "falseText";
  @SerializedName(SERIALIZED_NAME_FALSE_TEXT)
  private String falseText;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private BigDecimal fontSize;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  /**
   * Gets or Sets imageGravity
   */
  @JsonAdapter(ImageGravityEnum.Adapter.class)
  public enum ImageGravityEnum {
    NORTHWEST("NorthWest"),
    
    NORTH("North"),
    
    NORTHEAST("NorthEast"),
    
    WEST("West"),
    
    CENTER("Center"),
    
    EAST("East"),
    
    SOUTHWEST("SouthWest"),
    
    SOUTH("South"),
    
    SOUTHEAST("SouthEast");

    private String value;

    ImageGravityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageGravityEnum fromValue(String value) {
      for (ImageGravityEnum b : ImageGravityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageGravityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageGravityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageGravityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageGravityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_GRAVITY = "imageGravity";
  @SerializedName(SERIALIZED_NAME_IMAGE_GRAVITY)
  private ImageGravityEnum imageGravity;

  /**
   * Gets or Sets imageScaleType
   */
  @JsonAdapter(ImageScaleTypeEnum.Adapter.class)
  public enum ImageScaleTypeEnum {
    FIT("fit"),
    
    FILL("fill"),
    
    STRETCH("stretch");

    private String value;

    ImageScaleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageScaleTypeEnum fromValue(String value) {
      for (ImageScaleTypeEnum b : ImageScaleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageScaleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageScaleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageScaleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageScaleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_SCALE_TYPE = "imageScaleType";
  @SerializedName(SERIALIZED_NAME_IMAGE_SCALE_TYPE)
  private ImageScaleTypeEnum imageScaleType;

  public static final String SERIALIZED_NAME_INCLUDE_TIME = "includeTime";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TIME)
  private Boolean includeTime;

  public static final String SERIALIZED_NAME_INTEGER = "integer";
  @SerializedName(SERIALIZED_NAME_INTEGER)
  private Boolean integer;

  public static final String SERIALIZED_NAME_INVERT_BOOLEAN_CONDITION = "invertBooleanCondition";
  @SerializedName(SERIALIZED_NAME_INVERT_BOOLEAN_CONDITION)
  private Boolean invertBooleanCondition;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private BigDecimal maxLength;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private BigDecimal maximum;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private BigDecimal minLength;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private BigDecimal minimum;

  public static final String SERIALIZED_NAME_MULTILINE = "multiline";
  @SerializedName(SERIALIZED_NAME_MULTILINE)
  private Boolean multiline;

  public static final String SERIALIZED_NAME_MULTILINE_LINES = "multilineLines";
  @SerializedName(SERIALIZED_NAME_MULTILINE_LINES)
  private BigDecimal multilineLines;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_CONDITION_RANGE_EXCLUSIVE_MAX = "numberConditionRangeExclusiveMax";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONDITION_RANGE_EXCLUSIVE_MAX)
  private Boolean numberConditionRangeExclusiveMax;

  public static final String SERIALIZED_NAME_NUMBER_CONDITION_RANGE_EXCLUSIVE_MIN = "numberConditionRangeExclusiveMin";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONDITION_RANGE_EXCLUSIVE_MIN)
  private Boolean numberConditionRangeExclusiveMin;

  public static final String SERIALIZED_NAME_NUMBER_CONDITION_RANGE_MAX = "numberConditionRangeMax";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONDITION_RANGE_MAX)
  private BigDecimal numberConditionRangeMax;

  public static final String SERIALIZED_NAME_NUMBER_CONDITION_RANGE_MIN = "numberConditionRangeMin";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONDITION_RANGE_MIN)
  private BigDecimal numberConditionRangeMin;

  /**
   * Gets or Sets numberConditionType
   */
  @JsonAdapter(NumberConditionTypeEnum.Adapter.class)
  public enum NumberConditionTypeEnum {
    EQUALS("equals"),
    
    RANGE("range"),
    
    GTE("gte"),
    
    GT("gt"),
    
    LTE("lte"),
    
    LT("lt");

    private String value;

    NumberConditionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberConditionTypeEnum fromValue(String value) {
      for (NumberConditionTypeEnum b : NumberConditionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberConditionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberConditionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberConditionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberConditionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_CONDITION_TYPE = "numberConditionType";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONDITION_TYPE)
  private NumberConditionTypeEnum numberConditionType;

  public static final String SERIALIZED_NAME_OPACITY = "opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private BigDecimal opacity;

  public static final String SERIALIZED_NAME_OPTION_LIST = "optionList";
  @SerializedName(SERIALIZED_NAME_OPTION_LIST)
  private String optionList;

  /**
   * Gets or Sets overflow
   */
  @JsonAdapter(OverflowEnum.Adapter.class)
  public enum OverflowEnum {
    SHRINK_TO_FIT("shrink_to_fit"),
    
    TRUNCATE("truncate");

    private String value;

    OverflowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverflowEnum fromValue(String value) {
      for (OverflowEnum b : OverflowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverflowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverflowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverflowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverflowEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OVERFLOW = "overflow";
  @SerializedName(SERIALIZED_NAME_OVERFLOW)
  private OverflowEnum overflow;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;

  public static final String SERIALIZED_NAME_QRCODE_COLOR = "qrcodeColor";
  @SerializedName(SERIALIZED_NAME_QRCODE_COLOR)
  private String qrcodeColor;

  public static final String SERIALIZED_NAME_QRCODE_COLOR_FIELD_NAME = "qrcodeColorFieldName";
  @SerializedName(SERIALIZED_NAME_QRCODE_COLOR_FIELD_NAME)
  private String qrcodeColorFieldName;

  public static final String SERIALIZED_NAME_QRCODE_COLOR_FIELD_REQUIRED = "qrcodeColorFieldRequired";
  @SerializedName(SERIALIZED_NAME_QRCODE_COLOR_FIELD_REQUIRED)
  private Boolean qrcodeColorFieldRequired;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private BigDecimal rotation;

  public static final String SERIALIZED_NAME_SHAPE_BORDER_COLOR = "shapeBorderColor";
  @SerializedName(SERIALIZED_NAME_SHAPE_BORDER_COLOR)
  private String shapeBorderColor;

  public static final String SERIALIZED_NAME_SHAPE_BORDER_COLOR_FIELD_NAME = "shapeBorderColorFieldName";
  @SerializedName(SERIALIZED_NAME_SHAPE_BORDER_COLOR_FIELD_NAME)
  private String shapeBorderColorFieldName;

  public static final String SERIALIZED_NAME_SHAPE_BORDER_COLOR_FIELD_REQUIRED = "shapeBorderColorFieldRequired";
  @SerializedName(SERIALIZED_NAME_SHAPE_BORDER_COLOR_FIELD_REQUIRED)
  private Boolean shapeBorderColorFieldRequired;

  public static final String SERIALIZED_NAME_SHAPE_BORDER_WIDTH = "shapeBorderWidth";
  @SerializedName(SERIALIZED_NAME_SHAPE_BORDER_WIDTH)
  private BigDecimal shapeBorderWidth;

  public static final String SERIALIZED_NAME_SHAPE_FILL_COLOR = "shapeFillColor";
  @SerializedName(SERIALIZED_NAME_SHAPE_FILL_COLOR)
  private String shapeFillColor;

  public static final String SERIALIZED_NAME_SHAPE_FILL_COLOR_FIELD_NAME = "shapeFillColorFieldName";
  @SerializedName(SERIALIZED_NAME_SHAPE_FILL_COLOR_FIELD_NAME)
  private String shapeFillColorFieldName;

  public static final String SERIALIZED_NAME_SHAPE_FILL_COLOR_FIELD_REQUIRED = "shapeFillColorFieldRequired";
  @SerializedName(SERIALIZED_NAME_SHAPE_FILL_COLOR_FIELD_REQUIRED)
  private Boolean shapeFillColorFieldRequired;

  /**
   * Gets or Sets shapeType
   */
  @JsonAdapter(ShapeTypeEnum.Adapter.class)
  public enum ShapeTypeEnum {
    SQUARE("square"),
    
    RECTANGLE("rectangle"),
    
    CIRCLE("circle"),
    
    ELLIPSE("ellipse");

    private String value;

    ShapeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeTypeEnum fromValue(String value) {
      for (ShapeTypeEnum b : ShapeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHAPE_TYPE = "shapeType";
  @SerializedName(SERIALIZED_NAME_SHAPE_TYPE)
  private ShapeTypeEnum shapeType;

  public static final String SERIALIZED_NAME_SIGNATURE_ALLOW_DRAW = "signatureAllowDraw";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALLOW_DRAW)
  private Boolean signatureAllowDraw;

  public static final String SERIALIZED_NAME_SIGNATURE_ALLOW_TYPE = "signatureAllowType";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALLOW_TYPE)
  private Boolean signatureAllowType;

  public static final String SERIALIZED_NAME_STATIC = "static";
  @SerializedName(SERIALIZED_NAME_STATIC)
  private Boolean _static;

  public static final String SERIALIZED_NAME_STRIKETHROUGH = "strikethrough";
  @SerializedName(SERIALIZED_NAME_STRIKETHROUGH)
  private Boolean strikethrough;

  /**
   * Gets or Sets stringConditionType
   */
  @JsonAdapter(StringConditionTypeEnum.Adapter.class)
  public enum StringConditionTypeEnum {
    EQUALS("equals"),
    
    CONTAINS("contains"),
    
    STARTS_WITH("starts_with"),
    
    ENDS_WITH("ends_with"),
    
    REGEX("regex");

    private String value;

    StringConditionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StringConditionTypeEnum fromValue(String value) {
      for (StringConditionTypeEnum b : StringConditionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StringConditionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StringConditionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StringConditionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StringConditionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STRING_CONDITION_TYPE = "stringConditionType";
  @SerializedName(SERIALIZED_NAME_STRING_CONDITION_TYPE)
  private StringConditionTypeEnum stringConditionType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRUE_TEXT = "trueText";
  @SerializedName(SERIALIZED_NAME_TRUE_TEXT)
  private String trueText;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    BOOLEAN("boolean"),
    
    DATE("date"),
    
    ADDRESS("address"),
    
    COUNTRY("country"),
    
    EMAIL("email"),
    
    URL("url"),
    
    IMAGE("image"),
    
    SIGNATURE("signature"),
    
    BARCODE("barcode"),
    
    COMBINED("combined");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_TYPEFACE = "typeface";
  @SerializedName(SERIALIZED_NAME_TYPEFACE)
  private String typeface;

  public static final String SERIALIZED_NAME_UPPERCASE = "uppercase";
  @SerializedName(SERIALIZED_NAME_UPPERCASE)
  private Boolean uppercase;

  /**
   * Gets or Sets vAlignment
   */
  @JsonAdapter(VAlignmentEnum.Adapter.class)
  public enum VAlignmentEnum {
    BOTTOM("bottom"),
    
    CENTER("center"),
    
    TOP("top");

    private String value;

    VAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VAlignmentEnum fromValue(String value) {
      for (VAlignmentEnum b : VAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VAlignmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_V_ALIGNMENT = "vAlignment";
  @SerializedName(SERIALIZED_NAME_V_ALIGNMENT)
  private VAlignmentEnum vAlignment;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private BigDecimal x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private BigDecimal y;

  public TemplatesTemplateIdAddFieldsFields() { 
  }

  public TemplatesTemplateIdAddFieldsFields alignment(AlignmentEnum alignment) {
    
    this.alignment = alignment;
    return this;
  }

   /**
   * Get alignment
   * @return alignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AlignmentEnum getAlignment() {
    return alignment;
  }


  public void setAlignment(AlignmentEnum alignment) {
    this.alignment = alignment;
  }


  public TemplatesTemplateIdAddFieldsFields autoCalculateMaxLength(Boolean autoCalculateMaxLength) {
    
    this.autoCalculateMaxLength = autoCalculateMaxLength;
    return this;
  }

   /**
   * Get autoCalculateMaxLength
   * @return autoCalculateMaxLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAutoCalculateMaxLength() {
    return autoCalculateMaxLength;
  }


  public void setAutoCalculateMaxLength(Boolean autoCalculateMaxLength) {
    this.autoCalculateMaxLength = autoCalculateMaxLength;
  }


  public TemplatesTemplateIdAddFieldsFields backgroundColor(String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Get backgroundColor
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public TemplatesTemplateIdAddFieldsFields backgroundColorFieldName(String backgroundColorFieldName) {
    
    this.backgroundColorFieldName = backgroundColorFieldName;
    return this;
  }

   /**
   * Get backgroundColorFieldName
   * @return backgroundColorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackgroundColorFieldName() {
    return backgroundColorFieldName;
  }


  public void setBackgroundColorFieldName(String backgroundColorFieldName) {
    this.backgroundColorFieldName = backgroundColorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields backgroundColorFieldRequired(Boolean backgroundColorFieldRequired) {
    
    this.backgroundColorFieldRequired = backgroundColorFieldRequired;
    return this;
  }

   /**
   * Get backgroundColorFieldRequired
   * @return backgroundColorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBackgroundColorFieldRequired() {
    return backgroundColorFieldRequired;
  }


  public void setBackgroundColorFieldRequired(Boolean backgroundColorFieldRequired) {
    this.backgroundColorFieldRequired = backgroundColorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields barcodeSymbology(String barcodeSymbology) {
    
    this.barcodeSymbology = barcodeSymbology;
    return this;
  }

   /**
   * Get barcodeSymbology
   * @return barcodeSymbology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBarcodeSymbology() {
    return barcodeSymbology;
  }


  public void setBarcodeSymbology(String barcodeSymbology) {
    this.barcodeSymbology = barcodeSymbology;
  }


  public TemplatesTemplateIdAddFieldsFields bold(Boolean bold) {
    
    this.bold = bold;
    return this;
  }

   /**
   * Get bold
   * @return bold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBold() {
    return bold;
  }


  public void setBold(Boolean bold) {
    this.bold = bold;
  }


  public TemplatesTemplateIdAddFieldsFields characterSpacing(BigDecimal characterSpacing) {
    
    this.characterSpacing = characterSpacing;
    return this;
  }

   /**
   * Get characterSpacing
   * @return characterSpacing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCharacterSpacing() {
    return characterSpacing;
  }


  public void setCharacterSpacing(BigDecimal characterSpacing) {
    this.characterSpacing = characterSpacing;
  }


  public TemplatesTemplateIdAddFieldsFields checkCharacter(CheckCharacterEnum checkCharacter) {
    
    this.checkCharacter = checkCharacter;
    return this;
  }

   /**
   * Get checkCharacter
   * @return checkCharacter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckCharacterEnum getCheckCharacter() {
    return checkCharacter;
  }


  public void setCheckCharacter(CheckCharacterEnum checkCharacter) {
    this.checkCharacter = checkCharacter;
  }


  public TemplatesTemplateIdAddFieldsFields checkColor(String checkColor) {
    
    this.checkColor = checkColor;
    return this;
  }

   /**
   * Get checkColor
   * @return checkColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckColor() {
    return checkColor;
  }


  public void setCheckColor(String checkColor) {
    this.checkColor = checkColor;
  }


  public TemplatesTemplateIdAddFieldsFields checkColorFieldName(String checkColorFieldName) {
    
    this.checkColorFieldName = checkColorFieldName;
    return this;
  }

   /**
   * Get checkColorFieldName
   * @return checkColorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckColorFieldName() {
    return checkColorFieldName;
  }


  public void setCheckColorFieldName(String checkColorFieldName) {
    this.checkColorFieldName = checkColorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields checkColorFieldRequired(Boolean checkColorFieldRequired) {
    
    this.checkColorFieldRequired = checkColorFieldRequired;
    return this;
  }

   /**
   * Get checkColorFieldRequired
   * @return checkColorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCheckColorFieldRequired() {
    return checkColorFieldRequired;
  }


  public void setCheckColorFieldRequired(Boolean checkColorFieldRequired) {
    this.checkColorFieldRequired = checkColorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  public TemplatesTemplateIdAddFieldsFields colorFieldName(String colorFieldName) {
    
    this.colorFieldName = colorFieldName;
    return this;
  }

   /**
   * Get colorFieldName
   * @return colorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColorFieldName() {
    return colorFieldName;
  }


  public void setColorFieldName(String colorFieldName) {
    this.colorFieldName = colorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields colorFieldRequired(Boolean colorFieldRequired) {
    
    this.colorFieldRequired = colorFieldRequired;
    return this;
  }

   /**
   * Get colorFieldRequired
   * @return colorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getColorFieldRequired() {
    return colorFieldRequired;
  }


  public void setColorFieldRequired(Boolean colorFieldRequired) {
    this.colorFieldRequired = colorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields comb(Boolean comb) {
    
    this.comb = comb;
    return this;
  }

   /**
   * Get comb
   * @return comb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getComb() {
    return comb;
  }


  public void setComb(Boolean comb) {
    this.comb = comb;
  }


  public TemplatesTemplateIdAddFieldsFields combNumberOfCells(BigDecimal combNumberOfCells) {
    
    this.combNumberOfCells = combNumberOfCells;
    return this;
  }

   /**
   * Get combNumberOfCells
   * minimum: 0
   * @return combNumberOfCells
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCombNumberOfCells() {
    return combNumberOfCells;
  }


  public void setCombNumberOfCells(BigDecimal combNumberOfCells) {
    this.combNumberOfCells = combNumberOfCells;
  }


  public TemplatesTemplateIdAddFieldsFields combValueOffset(BigDecimal combValueOffset) {
    
    this.combValueOffset = combValueOffset;
    return this;
  }

   /**
   * Get combValueOffset
   * @return combValueOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCombValueOffset() {
    return combValueOffset;
  }


  public void setCombValueOffset(BigDecimal combValueOffset) {
    this.combValueOffset = combValueOffset;
  }


  public TemplatesTemplateIdAddFieldsFields combinedFieldFormat(String combinedFieldFormat) {
    
    this.combinedFieldFormat = combinedFieldFormat;
    return this;
  }

   /**
   * Get combinedFieldFormat
   * @return combinedFieldFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCombinedFieldFormat() {
    return combinedFieldFormat;
  }


  public void setCombinedFieldFormat(String combinedFieldFormat) {
    this.combinedFieldFormat = combinedFieldFormat;
  }


  public TemplatesTemplateIdAddFieldsFields combinedFieldNames(String combinedFieldNames) {
    
    this.combinedFieldNames = combinedFieldNames;
    return this;
  }

   /**
   * Get combinedFieldNames
   * @return combinedFieldNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCombinedFieldNames() {
    return combinedFieldNames;
  }


  public void setCombinedFieldNames(String combinedFieldNames) {
    this.combinedFieldNames = combinedFieldNames;
  }


  public TemplatesTemplateIdAddFieldsFields combinedFieldSeparator(String combinedFieldSeparator) {
    
    this.combinedFieldSeparator = combinedFieldSeparator;
    return this;
  }

   /**
   * Get combinedFieldSeparator
   * @return combinedFieldSeparator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCombinedFieldSeparator() {
    return combinedFieldSeparator;
  }


  public void setCombinedFieldSeparator(String combinedFieldSeparator) {
    this.combinedFieldSeparator = combinedFieldSeparator;
  }


  public TemplatesTemplateIdAddFieldsFields combinedFieldType(String combinedFieldType) {
    
    this.combinedFieldType = combinedFieldType;
    return this;
  }

   /**
   * Get combinedFieldType
   * @return combinedFieldType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCombinedFieldType() {
    return combinedFieldType;
  }


  public void setCombinedFieldType(String combinedFieldType) {
    this.combinedFieldType = combinedFieldType;
  }


  public TemplatesTemplateIdAddFieldsFields condition(String condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCondition() {
    return condition;
  }


  public void setCondition(String condition) {
    this.condition = condition;
  }


  public TemplatesTemplateIdAddFieldsFields currency(Boolean currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCurrency() {
    return currency;
  }


  public void setCurrency(Boolean currency) {
    this.currency = currency;
  }


  public TemplatesTemplateIdAddFieldsFields dateTimeFormat(String dateTimeFormat) {
    
    this.dateTimeFormat = dateTimeFormat;
    return this;
  }

   /**
   * Get dateTimeFormat
   * @return dateTimeFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateTimeFormat() {
    return dateTimeFormat;
  }


  public void setDateTimeFormat(String dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
  }


  public TemplatesTemplateIdAddFieldsFields decimalPlaces(BigDecimal decimalPlaces) {
    
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Get decimalPlaces
   * minimum: 0
   * @return decimalPlaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getDecimalPlaces() {
    return decimalPlaces;
  }


  public void setDecimalPlaces(BigDecimal decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public TemplatesTemplateIdAddFieldsFields _default(String _default) {
    
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefault() {
    return _default;
  }


  public void setDefault(String _default) {
    this._default = _default;
  }


  public TemplatesTemplateIdAddFieldsFields description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TemplatesTemplateIdAddFieldsFields displayType(DisplayTypeEnum displayType) {
    
    this.displayType = displayType;
    return this;
  }

   /**
   * Get displayType
   * @return displayType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DisplayTypeEnum getDisplayType() {
    return displayType;
  }


  public void setDisplayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
  }


  public TemplatesTemplateIdAddFieldsFields exclusiveMaximum(Boolean exclusiveMaximum) {
    
    this.exclusiveMaximum = exclusiveMaximum;
    return this;
  }

   /**
   * Get exclusiveMaximum
   * @return exclusiveMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExclusiveMaximum() {
    return exclusiveMaximum;
  }


  public void setExclusiveMaximum(Boolean exclusiveMaximum) {
    this.exclusiveMaximum = exclusiveMaximum;
  }


  public TemplatesTemplateIdAddFieldsFields exclusiveMinimum(Boolean exclusiveMinimum) {
    
    this.exclusiveMinimum = exclusiveMinimum;
    return this;
  }

   /**
   * Get exclusiveMinimum
   * @return exclusiveMinimum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExclusiveMinimum() {
    return exclusiveMinimum;
  }


  public void setExclusiveMinimum(Boolean exclusiveMinimum) {
    this.exclusiveMinimum = exclusiveMinimum;
  }


  public TemplatesTemplateIdAddFieldsFields falseText(String falseText) {
    
    this.falseText = falseText;
    return this;
  }

   /**
   * Get falseText
   * @return falseText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFalseText() {
    return falseText;
  }


  public void setFalseText(String falseText) {
    this.falseText = falseText;
  }


  public TemplatesTemplateIdAddFieldsFields fontSize(BigDecimal fontSize) {
    
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Get fontSize
   * minimum: 0
   * @return fontSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getFontSize() {
    return fontSize;
  }


  public void setFontSize(BigDecimal fontSize) {
    this.fontSize = fontSize;
  }


  public TemplatesTemplateIdAddFieldsFields height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * minimum: 0
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getHeight() {
    return height;
  }


  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public TemplatesTemplateIdAddFieldsFields hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * Get hidden
   * @return hidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public TemplatesTemplateIdAddFieldsFields id(BigDecimal id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getId() {
    return id;
  }


  public void setId(BigDecimal id) {
    this.id = id;
  }


  public TemplatesTemplateIdAddFieldsFields imageGravity(ImageGravityEnum imageGravity) {
    
    this.imageGravity = imageGravity;
    return this;
  }

   /**
   * Get imageGravity
   * @return imageGravity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageGravityEnum getImageGravity() {
    return imageGravity;
  }


  public void setImageGravity(ImageGravityEnum imageGravity) {
    this.imageGravity = imageGravity;
  }


  public TemplatesTemplateIdAddFieldsFields imageScaleType(ImageScaleTypeEnum imageScaleType) {
    
    this.imageScaleType = imageScaleType;
    return this;
  }

   /**
   * Get imageScaleType
   * @return imageScaleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageScaleTypeEnum getImageScaleType() {
    return imageScaleType;
  }


  public void setImageScaleType(ImageScaleTypeEnum imageScaleType) {
    this.imageScaleType = imageScaleType;
  }


  public TemplatesTemplateIdAddFieldsFields includeTime(Boolean includeTime) {
    
    this.includeTime = includeTime;
    return this;
  }

   /**
   * Get includeTime
   * @return includeTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIncludeTime() {
    return includeTime;
  }


  public void setIncludeTime(Boolean includeTime) {
    this.includeTime = includeTime;
  }


  public TemplatesTemplateIdAddFieldsFields integer(Boolean integer) {
    
    this.integer = integer;
    return this;
  }

   /**
   * Get integer
   * @return integer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInteger() {
    return integer;
  }


  public void setInteger(Boolean integer) {
    this.integer = integer;
  }


  public TemplatesTemplateIdAddFieldsFields invertBooleanCondition(Boolean invertBooleanCondition) {
    
    this.invertBooleanCondition = invertBooleanCondition;
    return this;
  }

   /**
   * Get invertBooleanCondition
   * @return invertBooleanCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInvertBooleanCondition() {
    return invertBooleanCondition;
  }


  public void setInvertBooleanCondition(Boolean invertBooleanCondition) {
    this.invertBooleanCondition = invertBooleanCondition;
  }


  public TemplatesTemplateIdAddFieldsFields maxLength(BigDecimal maxLength) {
    
    this.maxLength = maxLength;
    return this;
  }

   /**
   * Get maxLength
   * @return maxLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getMaxLength() {
    return maxLength;
  }


  public void setMaxLength(BigDecimal maxLength) {
    this.maxLength = maxLength;
  }


  public TemplatesTemplateIdAddFieldsFields maximum(BigDecimal maximum) {
    
    this.maximum = maximum;
    return this;
  }

   /**
   * Get maximum
   * @return maximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getMaximum() {
    return maximum;
  }


  public void setMaximum(BigDecimal maximum) {
    this.maximum = maximum;
  }


  public TemplatesTemplateIdAddFieldsFields metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public TemplatesTemplateIdAddFieldsFields minLength(BigDecimal minLength) {
    
    this.minLength = minLength;
    return this;
  }

   /**
   * Get minLength
   * @return minLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getMinLength() {
    return minLength;
  }


  public void setMinLength(BigDecimal minLength) {
    this.minLength = minLength;
  }


  public TemplatesTemplateIdAddFieldsFields minimum(BigDecimal minimum) {
    
    this.minimum = minimum;
    return this;
  }

   /**
   * Get minimum
   * @return minimum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getMinimum() {
    return minimum;
  }


  public void setMinimum(BigDecimal minimum) {
    this.minimum = minimum;
  }


  public TemplatesTemplateIdAddFieldsFields multiline(Boolean multiline) {
    
    this.multiline = multiline;
    return this;
  }

   /**
   * Get multiline
   * @return multiline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMultiline() {
    return multiline;
  }


  public void setMultiline(Boolean multiline) {
    this.multiline = multiline;
  }


  public TemplatesTemplateIdAddFieldsFields multilineLines(BigDecimal multilineLines) {
    
    this.multilineLines = multilineLines;
    return this;
  }

   /**
   * Get multilineLines
   * minimum: 0
   * @return multilineLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getMultilineLines() {
    return multilineLines;
  }


  public void setMultilineLines(BigDecimal multilineLines) {
    this.multilineLines = multilineLines;
  }


  public TemplatesTemplateIdAddFieldsFields name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TemplatesTemplateIdAddFieldsFields numberConditionRangeExclusiveMax(Boolean numberConditionRangeExclusiveMax) {
    
    this.numberConditionRangeExclusiveMax = numberConditionRangeExclusiveMax;
    return this;
  }

   /**
   * Get numberConditionRangeExclusiveMax
   * @return numberConditionRangeExclusiveMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNumberConditionRangeExclusiveMax() {
    return numberConditionRangeExclusiveMax;
  }


  public void setNumberConditionRangeExclusiveMax(Boolean numberConditionRangeExclusiveMax) {
    this.numberConditionRangeExclusiveMax = numberConditionRangeExclusiveMax;
  }


  public TemplatesTemplateIdAddFieldsFields numberConditionRangeExclusiveMin(Boolean numberConditionRangeExclusiveMin) {
    
    this.numberConditionRangeExclusiveMin = numberConditionRangeExclusiveMin;
    return this;
  }

   /**
   * Get numberConditionRangeExclusiveMin
   * @return numberConditionRangeExclusiveMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNumberConditionRangeExclusiveMin() {
    return numberConditionRangeExclusiveMin;
  }


  public void setNumberConditionRangeExclusiveMin(Boolean numberConditionRangeExclusiveMin) {
    this.numberConditionRangeExclusiveMin = numberConditionRangeExclusiveMin;
  }


  public TemplatesTemplateIdAddFieldsFields numberConditionRangeMax(BigDecimal numberConditionRangeMax) {
    
    this.numberConditionRangeMax = numberConditionRangeMax;
    return this;
  }

   /**
   * Get numberConditionRangeMax
   * @return numberConditionRangeMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getNumberConditionRangeMax() {
    return numberConditionRangeMax;
  }


  public void setNumberConditionRangeMax(BigDecimal numberConditionRangeMax) {
    this.numberConditionRangeMax = numberConditionRangeMax;
  }


  public TemplatesTemplateIdAddFieldsFields numberConditionRangeMin(BigDecimal numberConditionRangeMin) {
    
    this.numberConditionRangeMin = numberConditionRangeMin;
    return this;
  }

   /**
   * Get numberConditionRangeMin
   * @return numberConditionRangeMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getNumberConditionRangeMin() {
    return numberConditionRangeMin;
  }


  public void setNumberConditionRangeMin(BigDecimal numberConditionRangeMin) {
    this.numberConditionRangeMin = numberConditionRangeMin;
  }


  public TemplatesTemplateIdAddFieldsFields numberConditionType(NumberConditionTypeEnum numberConditionType) {
    
    this.numberConditionType = numberConditionType;
    return this;
  }

   /**
   * Get numberConditionType
   * @return numberConditionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NumberConditionTypeEnum getNumberConditionType() {
    return numberConditionType;
  }


  public void setNumberConditionType(NumberConditionTypeEnum numberConditionType) {
    this.numberConditionType = numberConditionType;
  }


  public TemplatesTemplateIdAddFieldsFields opacity(BigDecimal opacity) {
    
    this.opacity = opacity;
    return this;
  }

   /**
   * Get opacity
   * minimum: 0
   * maximum: 1
   * @return opacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOpacity() {
    return opacity;
  }


  public void setOpacity(BigDecimal opacity) {
    this.opacity = opacity;
  }


  public TemplatesTemplateIdAddFieldsFields optionList(String optionList) {
    
    this.optionList = optionList;
    return this;
  }

   /**
   * Get optionList
   * @return optionList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOptionList() {
    return optionList;
  }


  public void setOptionList(String optionList) {
    this.optionList = optionList;
  }


  public TemplatesTemplateIdAddFieldsFields overflow(OverflowEnum overflow) {
    
    this.overflow = overflow;
    return this;
  }

   /**
   * Get overflow
   * @return overflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OverflowEnum getOverflow() {
    return overflow;
  }


  public void setOverflow(OverflowEnum overflow) {
    this.overflow = overflow;
  }


  public TemplatesTemplateIdAddFieldsFields page(BigDecimal page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * @return page
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getPage() {
    return page;
  }


  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public TemplatesTemplateIdAddFieldsFields placeholder(String placeholder) {
    
    this.placeholder = placeholder;
    return this;
  }

   /**
   * Get placeholder
   * @return placeholder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlaceholder() {
    return placeholder;
  }


  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }


  public TemplatesTemplateIdAddFieldsFields qrcodeColor(String qrcodeColor) {
    
    this.qrcodeColor = qrcodeColor;
    return this;
  }

   /**
   * Get qrcodeColor
   * @return qrcodeColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQrcodeColor() {
    return qrcodeColor;
  }


  public void setQrcodeColor(String qrcodeColor) {
    this.qrcodeColor = qrcodeColor;
  }


  public TemplatesTemplateIdAddFieldsFields qrcodeColorFieldName(String qrcodeColorFieldName) {
    
    this.qrcodeColorFieldName = qrcodeColorFieldName;
    return this;
  }

   /**
   * Get qrcodeColorFieldName
   * @return qrcodeColorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQrcodeColorFieldName() {
    return qrcodeColorFieldName;
  }


  public void setQrcodeColorFieldName(String qrcodeColorFieldName) {
    this.qrcodeColorFieldName = qrcodeColorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields qrcodeColorFieldRequired(Boolean qrcodeColorFieldRequired) {
    
    this.qrcodeColorFieldRequired = qrcodeColorFieldRequired;
    return this;
  }

   /**
   * Get qrcodeColorFieldRequired
   * @return qrcodeColorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getQrcodeColorFieldRequired() {
    return qrcodeColorFieldRequired;
  }


  public void setQrcodeColorFieldRequired(Boolean qrcodeColorFieldRequired) {
    this.qrcodeColorFieldRequired = qrcodeColorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public TemplatesTemplateIdAddFieldsFields rotation(BigDecimal rotation) {
    
    this.rotation = rotation;
    return this;
  }

   /**
   * Get rotation
   * minimum: 0
   * maximum: 3.6E+2
   * @return rotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getRotation() {
    return rotation;
  }


  public void setRotation(BigDecimal rotation) {
    this.rotation = rotation;
  }


  public TemplatesTemplateIdAddFieldsFields shapeBorderColor(String shapeBorderColor) {
    
    this.shapeBorderColor = shapeBorderColor;
    return this;
  }

   /**
   * Get shapeBorderColor
   * @return shapeBorderColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShapeBorderColor() {
    return shapeBorderColor;
  }


  public void setShapeBorderColor(String shapeBorderColor) {
    this.shapeBorderColor = shapeBorderColor;
  }


  public TemplatesTemplateIdAddFieldsFields shapeBorderColorFieldName(String shapeBorderColorFieldName) {
    
    this.shapeBorderColorFieldName = shapeBorderColorFieldName;
    return this;
  }

   /**
   * Get shapeBorderColorFieldName
   * @return shapeBorderColorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShapeBorderColorFieldName() {
    return shapeBorderColorFieldName;
  }


  public void setShapeBorderColorFieldName(String shapeBorderColorFieldName) {
    this.shapeBorderColorFieldName = shapeBorderColorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields shapeBorderColorFieldRequired(Boolean shapeBorderColorFieldRequired) {
    
    this.shapeBorderColorFieldRequired = shapeBorderColorFieldRequired;
    return this;
  }

   /**
   * Get shapeBorderColorFieldRequired
   * @return shapeBorderColorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getShapeBorderColorFieldRequired() {
    return shapeBorderColorFieldRequired;
  }


  public void setShapeBorderColorFieldRequired(Boolean shapeBorderColorFieldRequired) {
    this.shapeBorderColorFieldRequired = shapeBorderColorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields shapeBorderWidth(BigDecimal shapeBorderWidth) {
    
    this.shapeBorderWidth = shapeBorderWidth;
    return this;
  }

   /**
   * Get shapeBorderWidth
   * minimum: 0
   * @return shapeBorderWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getShapeBorderWidth() {
    return shapeBorderWidth;
  }


  public void setShapeBorderWidth(BigDecimal shapeBorderWidth) {
    this.shapeBorderWidth = shapeBorderWidth;
  }


  public TemplatesTemplateIdAddFieldsFields shapeFillColor(String shapeFillColor) {
    
    this.shapeFillColor = shapeFillColor;
    return this;
  }

   /**
   * Get shapeFillColor
   * @return shapeFillColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShapeFillColor() {
    return shapeFillColor;
  }


  public void setShapeFillColor(String shapeFillColor) {
    this.shapeFillColor = shapeFillColor;
  }


  public TemplatesTemplateIdAddFieldsFields shapeFillColorFieldName(String shapeFillColorFieldName) {
    
    this.shapeFillColorFieldName = shapeFillColorFieldName;
    return this;
  }

   /**
   * Get shapeFillColorFieldName
   * @return shapeFillColorFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShapeFillColorFieldName() {
    return shapeFillColorFieldName;
  }


  public void setShapeFillColorFieldName(String shapeFillColorFieldName) {
    this.shapeFillColorFieldName = shapeFillColorFieldName;
  }


  public TemplatesTemplateIdAddFieldsFields shapeFillColorFieldRequired(Boolean shapeFillColorFieldRequired) {
    
    this.shapeFillColorFieldRequired = shapeFillColorFieldRequired;
    return this;
  }

   /**
   * Get shapeFillColorFieldRequired
   * @return shapeFillColorFieldRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getShapeFillColorFieldRequired() {
    return shapeFillColorFieldRequired;
  }


  public void setShapeFillColorFieldRequired(Boolean shapeFillColorFieldRequired) {
    this.shapeFillColorFieldRequired = shapeFillColorFieldRequired;
  }


  public TemplatesTemplateIdAddFieldsFields shapeType(ShapeTypeEnum shapeType) {
    
    this.shapeType = shapeType;
    return this;
  }

   /**
   * Get shapeType
   * @return shapeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShapeTypeEnum getShapeType() {
    return shapeType;
  }


  public void setShapeType(ShapeTypeEnum shapeType) {
    this.shapeType = shapeType;
  }


  public TemplatesTemplateIdAddFieldsFields signatureAllowDraw(Boolean signatureAllowDraw) {
    
    this.signatureAllowDraw = signatureAllowDraw;
    return this;
  }

   /**
   * Get signatureAllowDraw
   * @return signatureAllowDraw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSignatureAllowDraw() {
    return signatureAllowDraw;
  }


  public void setSignatureAllowDraw(Boolean signatureAllowDraw) {
    this.signatureAllowDraw = signatureAllowDraw;
  }


  public TemplatesTemplateIdAddFieldsFields signatureAllowType(Boolean signatureAllowType) {
    
    this.signatureAllowType = signatureAllowType;
    return this;
  }

   /**
   * Get signatureAllowType
   * @return signatureAllowType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSignatureAllowType() {
    return signatureAllowType;
  }


  public void setSignatureAllowType(Boolean signatureAllowType) {
    this.signatureAllowType = signatureAllowType;
  }


  public TemplatesTemplateIdAddFieldsFields _static(Boolean _static) {
    
    this._static = _static;
    return this;
  }

   /**
   * Get _static
   * @return _static
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getStatic() {
    return _static;
  }


  public void setStatic(Boolean _static) {
    this._static = _static;
  }


  public TemplatesTemplateIdAddFieldsFields strikethrough(Boolean strikethrough) {
    
    this.strikethrough = strikethrough;
    return this;
  }

   /**
   * Get strikethrough
   * @return strikethrough
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getStrikethrough() {
    return strikethrough;
  }


  public void setStrikethrough(Boolean strikethrough) {
    this.strikethrough = strikethrough;
  }


  public TemplatesTemplateIdAddFieldsFields stringConditionType(StringConditionTypeEnum stringConditionType) {
    
    this.stringConditionType = stringConditionType;
    return this;
  }

   /**
   * Get stringConditionType
   * @return stringConditionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StringConditionTypeEnum getStringConditionType() {
    return stringConditionType;
  }


  public void setStringConditionType(StringConditionTypeEnum stringConditionType) {
    this.stringConditionType = stringConditionType;
  }


  public TemplatesTemplateIdAddFieldsFields title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public TemplatesTemplateIdAddFieldsFields trueText(String trueText) {
    
    this.trueText = trueText;
    return this;
  }

   /**
   * Get trueText
   * @return trueText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrueText() {
    return trueText;
  }


  public void setTrueText(String trueText) {
    this.trueText = trueText;
  }


  public TemplatesTemplateIdAddFieldsFields type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TemplatesTemplateIdAddFieldsFields typeface(String typeface) {
    
    this.typeface = typeface;
    return this;
  }

   /**
   * Get typeface
   * @return typeface
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTypeface() {
    return typeface;
  }


  public void setTypeface(String typeface) {
    this.typeface = typeface;
  }


  public TemplatesTemplateIdAddFieldsFields uppercase(Boolean uppercase) {
    
    this.uppercase = uppercase;
    return this;
  }

   /**
   * Get uppercase
   * @return uppercase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUppercase() {
    return uppercase;
  }


  public void setUppercase(Boolean uppercase) {
    this.uppercase = uppercase;
  }


  public TemplatesTemplateIdAddFieldsFields vAlignment(VAlignmentEnum vAlignment) {
    
    this.vAlignment = vAlignment;
    return this;
  }

   /**
   * Get vAlignment
   * @return vAlignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VAlignmentEnum getvAlignment() {
    return vAlignment;
  }


  public void setvAlignment(VAlignmentEnum vAlignment) {
    this.vAlignment = vAlignment;
  }


  public TemplatesTemplateIdAddFieldsFields width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * minimum: 0
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getWidth() {
    return width;
  }


  public void setWidth(BigDecimal width) {
    this.width = width;
  }


  public TemplatesTemplateIdAddFieldsFields x(BigDecimal x) {
    
    this.x = x;
    return this;
  }

   /**
   * Get x
   * minimum: 0
   * @return x
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getX() {
    return x;
  }


  public void setX(BigDecimal x) {
    this.x = x;
  }


  public TemplatesTemplateIdAddFieldsFields y(BigDecimal y) {
    
    this.y = y;
    return this;
  }

   /**
   * Get y
   * minimum: 0
   * @return y
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getY() {
    return y;
  }


  public void setY(BigDecimal y) {
    this.y = y;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatesTemplateIdAddFieldsFields templatesTemplateIdAddFieldsFields = (TemplatesTemplateIdAddFieldsFields) o;
    return Objects.equals(this.alignment, templatesTemplateIdAddFieldsFields.alignment) &&
        Objects.equals(this.autoCalculateMaxLength, templatesTemplateIdAddFieldsFields.autoCalculateMaxLength) &&
        Objects.equals(this.backgroundColor, templatesTemplateIdAddFieldsFields.backgroundColor) &&
        Objects.equals(this.backgroundColorFieldName, templatesTemplateIdAddFieldsFields.backgroundColorFieldName) &&
        Objects.equals(this.backgroundColorFieldRequired, templatesTemplateIdAddFieldsFields.backgroundColorFieldRequired) &&
        Objects.equals(this.barcodeSymbology, templatesTemplateIdAddFieldsFields.barcodeSymbology) &&
        Objects.equals(this.bold, templatesTemplateIdAddFieldsFields.bold) &&
        Objects.equals(this.characterSpacing, templatesTemplateIdAddFieldsFields.characterSpacing) &&
        Objects.equals(this.checkCharacter, templatesTemplateIdAddFieldsFields.checkCharacter) &&
        Objects.equals(this.checkColor, templatesTemplateIdAddFieldsFields.checkColor) &&
        Objects.equals(this.checkColorFieldName, templatesTemplateIdAddFieldsFields.checkColorFieldName) &&
        Objects.equals(this.checkColorFieldRequired, templatesTemplateIdAddFieldsFields.checkColorFieldRequired) &&
        Objects.equals(this.color, templatesTemplateIdAddFieldsFields.color) &&
        Objects.equals(this.colorFieldName, templatesTemplateIdAddFieldsFields.colorFieldName) &&
        Objects.equals(this.colorFieldRequired, templatesTemplateIdAddFieldsFields.colorFieldRequired) &&
        Objects.equals(this.comb, templatesTemplateIdAddFieldsFields.comb) &&
        Objects.equals(this.combNumberOfCells, templatesTemplateIdAddFieldsFields.combNumberOfCells) &&
        Objects.equals(this.combValueOffset, templatesTemplateIdAddFieldsFields.combValueOffset) &&
        Objects.equals(this.combinedFieldFormat, templatesTemplateIdAddFieldsFields.combinedFieldFormat) &&
        Objects.equals(this.combinedFieldNames, templatesTemplateIdAddFieldsFields.combinedFieldNames) &&
        Objects.equals(this.combinedFieldSeparator, templatesTemplateIdAddFieldsFields.combinedFieldSeparator) &&
        Objects.equals(this.combinedFieldType, templatesTemplateIdAddFieldsFields.combinedFieldType) &&
        Objects.equals(this.condition, templatesTemplateIdAddFieldsFields.condition) &&
        Objects.equals(this.currency, templatesTemplateIdAddFieldsFields.currency) &&
        Objects.equals(this.dateTimeFormat, templatesTemplateIdAddFieldsFields.dateTimeFormat) &&
        Objects.equals(this.decimalPlaces, templatesTemplateIdAddFieldsFields.decimalPlaces) &&
        Objects.equals(this._default, templatesTemplateIdAddFieldsFields._default) &&
        Objects.equals(this.description, templatesTemplateIdAddFieldsFields.description) &&
        Objects.equals(this.displayType, templatesTemplateIdAddFieldsFields.displayType) &&
        Objects.equals(this.exclusiveMaximum, templatesTemplateIdAddFieldsFields.exclusiveMaximum) &&
        Objects.equals(this.exclusiveMinimum, templatesTemplateIdAddFieldsFields.exclusiveMinimum) &&
        Objects.equals(this.falseText, templatesTemplateIdAddFieldsFields.falseText) &&
        Objects.equals(this.fontSize, templatesTemplateIdAddFieldsFields.fontSize) &&
        Objects.equals(this.height, templatesTemplateIdAddFieldsFields.height) &&
        Objects.equals(this.hidden, templatesTemplateIdAddFieldsFields.hidden) &&
        Objects.equals(this.id, templatesTemplateIdAddFieldsFields.id) &&
        Objects.equals(this.imageGravity, templatesTemplateIdAddFieldsFields.imageGravity) &&
        Objects.equals(this.imageScaleType, templatesTemplateIdAddFieldsFields.imageScaleType) &&
        Objects.equals(this.includeTime, templatesTemplateIdAddFieldsFields.includeTime) &&
        Objects.equals(this.integer, templatesTemplateIdAddFieldsFields.integer) &&
        Objects.equals(this.invertBooleanCondition, templatesTemplateIdAddFieldsFields.invertBooleanCondition) &&
        Objects.equals(this.maxLength, templatesTemplateIdAddFieldsFields.maxLength) &&
        Objects.equals(this.maximum, templatesTemplateIdAddFieldsFields.maximum) &&
        Objects.equals(this.metadata, templatesTemplateIdAddFieldsFields.metadata) &&
        Objects.equals(this.minLength, templatesTemplateIdAddFieldsFields.minLength) &&
        Objects.equals(this.minimum, templatesTemplateIdAddFieldsFields.minimum) &&
        Objects.equals(this.multiline, templatesTemplateIdAddFieldsFields.multiline) &&
        Objects.equals(this.multilineLines, templatesTemplateIdAddFieldsFields.multilineLines) &&
        Objects.equals(this.name, templatesTemplateIdAddFieldsFields.name) &&
        Objects.equals(this.numberConditionRangeExclusiveMax, templatesTemplateIdAddFieldsFields.numberConditionRangeExclusiveMax) &&
        Objects.equals(this.numberConditionRangeExclusiveMin, templatesTemplateIdAddFieldsFields.numberConditionRangeExclusiveMin) &&
        Objects.equals(this.numberConditionRangeMax, templatesTemplateIdAddFieldsFields.numberConditionRangeMax) &&
        Objects.equals(this.numberConditionRangeMin, templatesTemplateIdAddFieldsFields.numberConditionRangeMin) &&
        Objects.equals(this.numberConditionType, templatesTemplateIdAddFieldsFields.numberConditionType) &&
        Objects.equals(this.opacity, templatesTemplateIdAddFieldsFields.opacity) &&
        Objects.equals(this.optionList, templatesTemplateIdAddFieldsFields.optionList) &&
        Objects.equals(this.overflow, templatesTemplateIdAddFieldsFields.overflow) &&
        Objects.equals(this.page, templatesTemplateIdAddFieldsFields.page) &&
        Objects.equals(this.placeholder, templatesTemplateIdAddFieldsFields.placeholder) &&
        Objects.equals(this.qrcodeColor, templatesTemplateIdAddFieldsFields.qrcodeColor) &&
        Objects.equals(this.qrcodeColorFieldName, templatesTemplateIdAddFieldsFields.qrcodeColorFieldName) &&
        Objects.equals(this.qrcodeColorFieldRequired, templatesTemplateIdAddFieldsFields.qrcodeColorFieldRequired) &&
        Objects.equals(this.required, templatesTemplateIdAddFieldsFields.required) &&
        Objects.equals(this.rotation, templatesTemplateIdAddFieldsFields.rotation) &&
        Objects.equals(this.shapeBorderColor, templatesTemplateIdAddFieldsFields.shapeBorderColor) &&
        Objects.equals(this.shapeBorderColorFieldName, templatesTemplateIdAddFieldsFields.shapeBorderColorFieldName) &&
        Objects.equals(this.shapeBorderColorFieldRequired, templatesTemplateIdAddFieldsFields.shapeBorderColorFieldRequired) &&
        Objects.equals(this.shapeBorderWidth, templatesTemplateIdAddFieldsFields.shapeBorderWidth) &&
        Objects.equals(this.shapeFillColor, templatesTemplateIdAddFieldsFields.shapeFillColor) &&
        Objects.equals(this.shapeFillColorFieldName, templatesTemplateIdAddFieldsFields.shapeFillColorFieldName) &&
        Objects.equals(this.shapeFillColorFieldRequired, templatesTemplateIdAddFieldsFields.shapeFillColorFieldRequired) &&
        Objects.equals(this.shapeType, templatesTemplateIdAddFieldsFields.shapeType) &&
        Objects.equals(this.signatureAllowDraw, templatesTemplateIdAddFieldsFields.signatureAllowDraw) &&
        Objects.equals(this.signatureAllowType, templatesTemplateIdAddFieldsFields.signatureAllowType) &&
        Objects.equals(this._static, templatesTemplateIdAddFieldsFields._static) &&
        Objects.equals(this.strikethrough, templatesTemplateIdAddFieldsFields.strikethrough) &&
        Objects.equals(this.stringConditionType, templatesTemplateIdAddFieldsFields.stringConditionType) &&
        Objects.equals(this.title, templatesTemplateIdAddFieldsFields.title) &&
        Objects.equals(this.trueText, templatesTemplateIdAddFieldsFields.trueText) &&
        Objects.equals(this.type, templatesTemplateIdAddFieldsFields.type) &&
        Objects.equals(this.typeface, templatesTemplateIdAddFieldsFields.typeface) &&
        Objects.equals(this.uppercase, templatesTemplateIdAddFieldsFields.uppercase) &&
        Objects.equals(this.vAlignment, templatesTemplateIdAddFieldsFields.vAlignment) &&
        Objects.equals(this.width, templatesTemplateIdAddFieldsFields.width) &&
        Objects.equals(this.x, templatesTemplateIdAddFieldsFields.x) &&
        Objects.equals(this.y, templatesTemplateIdAddFieldsFields.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, autoCalculateMaxLength, backgroundColor, backgroundColorFieldName, backgroundColorFieldRequired, barcodeSymbology, bold, characterSpacing, checkCharacter, checkColor, checkColorFieldName, checkColorFieldRequired, color, colorFieldName, colorFieldRequired, comb, combNumberOfCells, combValueOffset, combinedFieldFormat, combinedFieldNames, combinedFieldSeparator, combinedFieldType, condition, currency, dateTimeFormat, decimalPlaces, _default, description, displayType, exclusiveMaximum, exclusiveMinimum, falseText, fontSize, height, hidden, id, imageGravity, imageScaleType, includeTime, integer, invertBooleanCondition, maxLength, maximum, metadata, minLength, minimum, multiline, multilineLines, name, numberConditionRangeExclusiveMax, numberConditionRangeExclusiveMin, numberConditionRangeMax, numberConditionRangeMin, numberConditionType, opacity, optionList, overflow, page, placeholder, qrcodeColor, qrcodeColorFieldName, qrcodeColorFieldRequired, required, rotation, shapeBorderColor, shapeBorderColorFieldName, shapeBorderColorFieldRequired, shapeBorderWidth, shapeFillColor, shapeFillColorFieldName, shapeFillColorFieldRequired, shapeType, signatureAllowDraw, signatureAllowType, _static, strikethrough, stringConditionType, title, trueText, type, typeface, uppercase, vAlignment, width, x, y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatesTemplateIdAddFieldsFields {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    autoCalculateMaxLength: ").append(toIndentedString(autoCalculateMaxLength)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundColorFieldName: ").append(toIndentedString(backgroundColorFieldName)).append("\n");
    sb.append("    backgroundColorFieldRequired: ").append(toIndentedString(backgroundColorFieldRequired)).append("\n");
    sb.append("    barcodeSymbology: ").append(toIndentedString(barcodeSymbology)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    characterSpacing: ").append(toIndentedString(characterSpacing)).append("\n");
    sb.append("    checkCharacter: ").append(toIndentedString(checkCharacter)).append("\n");
    sb.append("    checkColor: ").append(toIndentedString(checkColor)).append("\n");
    sb.append("    checkColorFieldName: ").append(toIndentedString(checkColorFieldName)).append("\n");
    sb.append("    checkColorFieldRequired: ").append(toIndentedString(checkColorFieldRequired)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colorFieldName: ").append(toIndentedString(colorFieldName)).append("\n");
    sb.append("    colorFieldRequired: ").append(toIndentedString(colorFieldRequired)).append("\n");
    sb.append("    comb: ").append(toIndentedString(comb)).append("\n");
    sb.append("    combNumberOfCells: ").append(toIndentedString(combNumberOfCells)).append("\n");
    sb.append("    combValueOffset: ").append(toIndentedString(combValueOffset)).append("\n");
    sb.append("    combinedFieldFormat: ").append(toIndentedString(combinedFieldFormat)).append("\n");
    sb.append("    combinedFieldNames: ").append(toIndentedString(combinedFieldNames)).append("\n");
    sb.append("    combinedFieldSeparator: ").append(toIndentedString(combinedFieldSeparator)).append("\n");
    sb.append("    combinedFieldType: ").append(toIndentedString(combinedFieldType)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateTimeFormat: ").append(toIndentedString(dateTimeFormat)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayType: ").append(toIndentedString(displayType)).append("\n");
    sb.append("    exclusiveMaximum: ").append(toIndentedString(exclusiveMaximum)).append("\n");
    sb.append("    exclusiveMinimum: ").append(toIndentedString(exclusiveMinimum)).append("\n");
    sb.append("    falseText: ").append(toIndentedString(falseText)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageGravity: ").append(toIndentedString(imageGravity)).append("\n");
    sb.append("    imageScaleType: ").append(toIndentedString(imageScaleType)).append("\n");
    sb.append("    includeTime: ").append(toIndentedString(includeTime)).append("\n");
    sb.append("    integer: ").append(toIndentedString(integer)).append("\n");
    sb.append("    invertBooleanCondition: ").append(toIndentedString(invertBooleanCondition)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    multiline: ").append(toIndentedString(multiline)).append("\n");
    sb.append("    multilineLines: ").append(toIndentedString(multilineLines)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberConditionRangeExclusiveMax: ").append(toIndentedString(numberConditionRangeExclusiveMax)).append("\n");
    sb.append("    numberConditionRangeExclusiveMin: ").append(toIndentedString(numberConditionRangeExclusiveMin)).append("\n");
    sb.append("    numberConditionRangeMax: ").append(toIndentedString(numberConditionRangeMax)).append("\n");
    sb.append("    numberConditionRangeMin: ").append(toIndentedString(numberConditionRangeMin)).append("\n");
    sb.append("    numberConditionType: ").append(toIndentedString(numberConditionType)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    optionList: ").append(toIndentedString(optionList)).append("\n");
    sb.append("    overflow: ").append(toIndentedString(overflow)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    qrcodeColor: ").append(toIndentedString(qrcodeColor)).append("\n");
    sb.append("    qrcodeColorFieldName: ").append(toIndentedString(qrcodeColorFieldName)).append("\n");
    sb.append("    qrcodeColorFieldRequired: ").append(toIndentedString(qrcodeColorFieldRequired)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    shapeBorderColor: ").append(toIndentedString(shapeBorderColor)).append("\n");
    sb.append("    shapeBorderColorFieldName: ").append(toIndentedString(shapeBorderColorFieldName)).append("\n");
    sb.append("    shapeBorderColorFieldRequired: ").append(toIndentedString(shapeBorderColorFieldRequired)).append("\n");
    sb.append("    shapeBorderWidth: ").append(toIndentedString(shapeBorderWidth)).append("\n");
    sb.append("    shapeFillColor: ").append(toIndentedString(shapeFillColor)).append("\n");
    sb.append("    shapeFillColorFieldName: ").append(toIndentedString(shapeFillColorFieldName)).append("\n");
    sb.append("    shapeFillColorFieldRequired: ").append(toIndentedString(shapeFillColorFieldRequired)).append("\n");
    sb.append("    shapeType: ").append(toIndentedString(shapeType)).append("\n");
    sb.append("    signatureAllowDraw: ").append(toIndentedString(signatureAllowDraw)).append("\n");
    sb.append("    signatureAllowType: ").append(toIndentedString(signatureAllowType)).append("\n");
    sb.append("    _static: ").append(toIndentedString(_static)).append("\n");
    sb.append("    strikethrough: ").append(toIndentedString(strikethrough)).append("\n");
    sb.append("    stringConditionType: ").append(toIndentedString(stringConditionType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trueText: ").append(toIndentedString(trueText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeface: ").append(toIndentedString(typeface)).append("\n");
    sb.append("    uppercase: ").append(toIndentedString(uppercase)).append("\n");
    sb.append("    vAlignment: ").append(toIndentedString(vAlignment)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alignment");
    openapiFields.add("autoCalculateMaxLength");
    openapiFields.add("backgroundColor");
    openapiFields.add("backgroundColorFieldName");
    openapiFields.add("backgroundColorFieldRequired");
    openapiFields.add("barcodeSymbology");
    openapiFields.add("bold");
    openapiFields.add("characterSpacing");
    openapiFields.add("checkCharacter");
    openapiFields.add("checkColor");
    openapiFields.add("checkColorFieldName");
    openapiFields.add("checkColorFieldRequired");
    openapiFields.add("color");
    openapiFields.add("colorFieldName");
    openapiFields.add("colorFieldRequired");
    openapiFields.add("comb");
    openapiFields.add("combNumberOfCells");
    openapiFields.add("combValueOffset");
    openapiFields.add("combinedFieldFormat");
    openapiFields.add("combinedFieldNames");
    openapiFields.add("combinedFieldSeparator");
    openapiFields.add("combinedFieldType");
    openapiFields.add("condition");
    openapiFields.add("currency");
    openapiFields.add("dateTimeFormat");
    openapiFields.add("decimalPlaces");
    openapiFields.add("default");
    openapiFields.add("description");
    openapiFields.add("displayType");
    openapiFields.add("exclusiveMaximum");
    openapiFields.add("exclusiveMinimum");
    openapiFields.add("falseText");
    openapiFields.add("fontSize");
    openapiFields.add("height");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("imageGravity");
    openapiFields.add("imageScaleType");
    openapiFields.add("includeTime");
    openapiFields.add("integer");
    openapiFields.add("invertBooleanCondition");
    openapiFields.add("maxLength");
    openapiFields.add("maximum");
    openapiFields.add("metadata");
    openapiFields.add("minLength");
    openapiFields.add("minimum");
    openapiFields.add("multiline");
    openapiFields.add("multilineLines");
    openapiFields.add("name");
    openapiFields.add("numberConditionRangeExclusiveMax");
    openapiFields.add("numberConditionRangeExclusiveMin");
    openapiFields.add("numberConditionRangeMax");
    openapiFields.add("numberConditionRangeMin");
    openapiFields.add("numberConditionType");
    openapiFields.add("opacity");
    openapiFields.add("optionList");
    openapiFields.add("overflow");
    openapiFields.add("page");
    openapiFields.add("placeholder");
    openapiFields.add("qrcodeColor");
    openapiFields.add("qrcodeColorFieldName");
    openapiFields.add("qrcodeColorFieldRequired");
    openapiFields.add("required");
    openapiFields.add("rotation");
    openapiFields.add("shapeBorderColor");
    openapiFields.add("shapeBorderColorFieldName");
    openapiFields.add("shapeBorderColorFieldRequired");
    openapiFields.add("shapeBorderWidth");
    openapiFields.add("shapeFillColor");
    openapiFields.add("shapeFillColorFieldName");
    openapiFields.add("shapeFillColorFieldRequired");
    openapiFields.add("shapeType");
    openapiFields.add("signatureAllowDraw");
    openapiFields.add("signatureAllowType");
    openapiFields.add("static");
    openapiFields.add("strikethrough");
    openapiFields.add("stringConditionType");
    openapiFields.add("title");
    openapiFields.add("trueText");
    openapiFields.add("type");
    openapiFields.add("typeface");
    openapiFields.add("uppercase");
    openapiFields.add("vAlignment");
    openapiFields.add("width");
    openapiFields.add("x");
    openapiFields.add("y");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("page");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplatesTemplateIdAddFieldsFields
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TemplatesTemplateIdAddFieldsFields.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplatesTemplateIdAddFieldsFields is not found in the empty JSON string", TemplatesTemplateIdAddFieldsFields.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TemplatesTemplateIdAddFieldsFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplatesTemplateIdAddFieldsFields` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TemplatesTemplateIdAddFieldsFields.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplatesTemplateIdAddFieldsFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplatesTemplateIdAddFieldsFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplatesTemplateIdAddFieldsFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplatesTemplateIdAddFieldsFields.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplatesTemplateIdAddFieldsFields>() {
           @Override
           public void write(JsonWriter out, TemplatesTemplateIdAddFieldsFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplatesTemplateIdAddFieldsFields read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplatesTemplateIdAddFieldsFields given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplatesTemplateIdAddFieldsFields
  * @throws IOException if the JSON string is invalid with respect to TemplatesTemplateIdAddFieldsFields
  */
  public static TemplatesTemplateIdAddFieldsFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplatesTemplateIdAddFieldsFields.class);
  }

 /**
  * Convert an instance of TemplatesTemplateIdAddFieldsFields to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

