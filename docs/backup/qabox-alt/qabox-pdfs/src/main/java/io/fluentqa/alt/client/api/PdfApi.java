/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fluentqa.alt.client.api;

import io.fluentqa.alt.client.ApiCallback;
import io.fluentqa.alt.client.ApiClient;
import io.fluentqa.alt.client.ApiException;
import io.fluentqa.alt.client.ApiResponse;
import io.fluentqa.alt.client.Configuration;
import io.fluentqa.alt.client.Pair;
import io.fluentqa.alt.client.ProgressRequestBody;
import io.fluentqa.alt.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import io.fluentqa.alt.client.model.AddFieldsData;
import io.fluentqa.alt.client.model.AddFieldsTemplateResponse;
import io.fluentqa.alt.client.model.AuthenticationError;
import io.fluentqa.alt.client.model.AuthenticationSuccessResponse;
import java.math.BigDecimal;
import io.fluentqa.alt.client.model.CombinePdfsData;
import io.fluentqa.alt.client.model.CombinedSubmission;
import io.fluentqa.alt.client.model.CombinedSubmissionData;
import io.fluentqa.alt.client.model.CopyTemplateData;
import io.fluentqa.alt.client.model.CreateCombinedSubmissionResponse;
import io.fluentqa.alt.client.model.CreateCustomFileData;
import io.fluentqa.alt.client.model.CreateCustomFileResponse;
import io.fluentqa.alt.client.model.CreateFolderData;
import io.fluentqa.alt.client.model.CreateHtmlTemplateData;
import io.fluentqa.alt.client.model.CreateSubmissionBatchResponse;
import io.fluentqa.alt.client.model.CreateSubmissionDataRequestTokenResponse;
import io.fluentqa.alt.client.model.CreateSubmissionResponse;
import io.fluentqa.alt.client.model.CreateTemplateFromUploadData;
import io.fluentqa.alt.client.model.Error;
import java.io.File;
import io.fluentqa.alt.client.model.Folder;
import io.fluentqa.alt.client.model.InvalidRequest;
import io.fluentqa.alt.client.model.ListSubmissionsResponse;
import io.fluentqa.alt.client.model.MoveFolderData;
import io.fluentqa.alt.client.model.MoveTemplateData;
import io.fluentqa.alt.client.model.PendingTemplate;
import io.fluentqa.alt.client.model.RenameFolderData;
import io.fluentqa.alt.client.model.Submission;
import io.fluentqa.alt.client.model.SubmissionBatch;
import io.fluentqa.alt.client.model.SubmissionBatchData;
import io.fluentqa.alt.client.model.SubmissionData;
import io.fluentqa.alt.client.model.SubmissionDataRequest;
import io.fluentqa.alt.client.model.Template;
import io.fluentqa.alt.client.model.Template1;
import io.fluentqa.alt.client.model.TemplateSchema;
import io.fluentqa.alt.client.model.UpdateDataRequestResponse;
import io.fluentqa.alt.client.model.UpdateSubmissionDataRequestData;
import io.fluentqa.alt.client.model.UpdateTemplateData;
import io.fluentqa.alt.client.model.UpdateTemplateResponse;
import io.fluentqa.alt.client.model.UploadPresign;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PdfApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PdfApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PdfApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFieldsToTemplate
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> add fields success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> add fields error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFieldsToTemplateCall(String templateId, AddFieldsData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/add_fields"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFieldsToTemplateValidateBeforeCall(String templateId, AddFieldsData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling addFieldsToTemplate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling addFieldsToTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = addFieldsToTemplateCall(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Add new fields to a Template
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return AddFieldsTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> add fields success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> add fields error </td><td>  -  </td></tr>
     </table>
     */
    public AddFieldsTemplateResponse addFieldsToTemplate(String templateId, AddFieldsData data) throws ApiException {
        ApiResponse<AddFieldsTemplateResponse> localVarResp = addFieldsToTemplateWithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Add new fields to a Template
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;AddFieldsTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> add fields success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> add fields error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddFieldsTemplateResponse> addFieldsToTemplateWithHttpInfo(String templateId, AddFieldsData data) throws ApiException {
        okhttp3.Call localVarCall = addFieldsToTemplateValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<AddFieldsTemplateResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AddFieldsTemplateResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<AddFieldsTemplateResponse>(){});
            throw e;
        }
    }

    /**
     * Add new fields to a Template (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> add fields success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> add fields error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFieldsToTemplateAsync(String templateId, AddFieldsData data, final ApiCallback<AddFieldsTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFieldsToTemplateValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<AddFieldsTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchGeneratePdfV1
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid requests </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGeneratePdfV1Call(String templateId, List<Object> data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/submissions/batch"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGeneratePdfV1ValidateBeforeCall(String templateId, List<Object> data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling batchGeneratePdfV1(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling batchGeneratePdfV1(Async)");
        }
        

        okhttp3.Call localVarCall = batchGeneratePdfV1Call(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Generates multiple PDFs
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return List&lt;CreateSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid requests </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateSubmissionResponse> batchGeneratePdfV1(String templateId, List<Object> data) throws ApiException {
        ApiResponse<List<CreateSubmissionResponse>> localVarResp = batchGeneratePdfV1WithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Generates multiple PDFs
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;CreateSubmissionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid requests </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateSubmissionResponse>> batchGeneratePdfV1WithHttpInfo(String templateId, List<Object> data) throws ApiException {
        okhttp3.Call localVarCall = batchGeneratePdfV1ValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<List<CreateSubmissionResponse>>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<List<CreateSubmissionResponse>>(){}.getType()));
            e.setErrorObjectType(new GenericType<List<CreateSubmissionResponse>>(){});
            throw e;
        }
    }

    /**
     * Generates multiple PDFs (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid requests </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGeneratePdfV1Async(String templateId, List<Object> data, final ApiCallback<List<CreateSubmissionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGeneratePdfV1ValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<List<CreateSubmissionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchGeneratePdfs
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> some PDFs with invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGeneratePdfsCall(SubmissionBatchData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/submissions/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGeneratePdfsValidateBeforeCall(SubmissionBatchData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling batchGeneratePdfs(Async)");
        }
        

        okhttp3.Call localVarCall = batchGeneratePdfsCall(data, _callback);
        return localVarCall;

    }

    /**
     * Generates multiple PDFs
     * 
     * @param data  (required)
     * @return CreateSubmissionBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> some PDFs with invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubmissionBatchResponse batchGeneratePdfs(SubmissionBatchData data) throws ApiException {
        ApiResponse<CreateSubmissionBatchResponse> localVarResp = batchGeneratePdfsWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Generates multiple PDFs
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CreateSubmissionBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> some PDFs with invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSubmissionBatchResponse> batchGeneratePdfsWithHttpInfo(SubmissionBatchData data) throws ApiException {
        okhttp3.Call localVarCall = batchGeneratePdfsValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<CreateSubmissionBatchResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateSubmissionBatchResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateSubmissionBatchResponse>(){});
            throw e;
        }
    }

    /**
     * Generates multiple PDFs (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submissions created </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> some PDFs with invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGeneratePdfsAsync(SubmissionBatchData data, final ApiCallback<CreateSubmissionBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGeneratePdfsValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CreateSubmissionBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for combinePdfs
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combinePdfsCall(CombinePdfsData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/combined_submissions?v=2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combinePdfsValidateBeforeCall(CombinePdfsData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling combinePdfs(Async)");
        }
        

        okhttp3.Call localVarCall = combinePdfsCall(data, _callback);
        return localVarCall;

    }

    /**
     * Merge submission PDFs, template PDFs, or custom files
     * 
     * @param data  (required)
     * @return CreateCombinedSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateCombinedSubmissionResponse combinePdfs(CombinePdfsData data) throws ApiException {
        ApiResponse<CreateCombinedSubmissionResponse> localVarResp = combinePdfsWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Merge submission PDFs, template PDFs, or custom files
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CreateCombinedSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCombinedSubmissionResponse> combinePdfsWithHttpInfo(CombinePdfsData data) throws ApiException {
        okhttp3.Call localVarCall = combinePdfsValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<CreateCombinedSubmissionResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateCombinedSubmissionResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateCombinedSubmissionResponse>(){});
            throw e;
        }
    }

    /**
     * Merge submission PDFs, template PDFs, or custom files (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combinePdfsAsync(CombinePdfsData data, final ApiCallback<CreateCombinedSubmissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = combinePdfsValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CreateCombinedSubmissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for combineSubmissions
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineSubmissionsCall(CombinedSubmissionData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/combined_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combineSubmissionsValidateBeforeCall(CombinedSubmissionData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling combineSubmissions(Async)");
        }
        

        okhttp3.Call localVarCall = combineSubmissionsCall(data, _callback);
        return localVarCall;

    }

    /**
     * Merge generated PDFs together
     * 
     * @param data  (required)
     * @return CreateCombinedSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateCombinedSubmissionResponse combineSubmissions(CombinedSubmissionData data) throws ApiException {
        ApiResponse<CreateCombinedSubmissionResponse> localVarResp = combineSubmissionsWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Merge generated PDFs together
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CreateCombinedSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCombinedSubmissionResponse> combineSubmissionsWithHttpInfo(CombinedSubmissionData data) throws ApiException {
        okhttp3.Call localVarCall = combineSubmissionsValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<CreateCombinedSubmissionResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateCombinedSubmissionResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateCombinedSubmissionResponse>(){});
            throw e;
        }
    }

    /**
     * Merge generated PDFs together (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> combined submission created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call combineSubmissionsAsync(CombinedSubmissionData data, final ApiCallback<CreateCombinedSubmissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = combineSubmissionsValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CreateCombinedSubmissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyTemplate
     * @param templateId  (required)
     * @param data  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyTemplateCall(String templateId, CopyTemplateData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/copy"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyTemplateValidateBeforeCall(String templateId, CopyTemplateData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling copyTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = copyTemplateCall(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Copy a Template
     * 
     * @param templateId  (required)
     * @param data  (optional)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public Template copyTemplate(String templateId, CopyTemplateData data) throws ApiException {
        ApiResponse<Template> localVarResp = copyTemplateWithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Copy a Template
     * 
     * @param templateId  (required)
     * @param data  (optional)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template> copyTemplateWithHttpInfo(String templateId, CopyTemplateData data) throws ApiException {
        okhttp3.Call localVarCall = copyTemplateValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<Template>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Template>(){}.getType()));
            e.setErrorObjectType(new GenericType<Template>(){});
            throw e;
        }
    }

    /**
     * Copy a Template (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyTemplateAsync(String templateId, CopyTemplateData data, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyTemplateValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomFileFromUpload
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns the custom file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFileFromUploadCall(CreateCustomFileData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/custom_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFileFromUploadValidateBeforeCall(CreateCustomFileData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createCustomFileFromUpload(Async)");
        }
        

        okhttp3.Call localVarCall = createCustomFileFromUploadCall(data, _callback);
        return localVarCall;

    }

    /**
     * Create a new custom file from a cached presign upload
     * 
     * @param data  (required)
     * @return CreateCustomFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns the custom file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFileResponse createCustomFileFromUpload(CreateCustomFileData data) throws ApiException {
        ApiResponse<CreateCustomFileResponse> localVarResp = createCustomFileFromUploadWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Create a new custom file from a cached presign upload
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CreateCustomFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns the custom file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomFileResponse> createCustomFileFromUploadWithHttpInfo(CreateCustomFileData data) throws ApiException {
        okhttp3.Call localVarCall = createCustomFileFromUploadValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<CreateCustomFileResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateCustomFileResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateCustomFileResponse>(){});
            throw e;
        }
    }

    /**
     * Create a new custom file from a cached presign upload (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns the custom file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFileFromUploadAsync(CreateCustomFileData data, final ApiCallback<CreateCustomFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFileFromUploadValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataRequestToken
     * @param dataRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> token created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRequestTokenCall(String dataRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data_requests/{data_request_id}/tokens"
            .replaceAll("\\{" + "data_request_id" + "\\}", localVarApiClient.escapeString(dataRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataRequestTokenValidateBeforeCall(String dataRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataRequestId' is set
        if (dataRequestId == null) {
            throw new ApiException("Missing the required parameter 'dataRequestId' when calling createDataRequestToken(Async)");
        }
        

        okhttp3.Call localVarCall = createDataRequestTokenCall(dataRequestId, _callback);
        return localVarCall;

    }

    /**
     * Creates a new data request token for form authentication
     * 
     * @param dataRequestId  (required)
     * @return CreateSubmissionDataRequestTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> token created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubmissionDataRequestTokenResponse createDataRequestToken(String dataRequestId) throws ApiException {
        ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResp = createDataRequestTokenWithHttpInfo(dataRequestId);
        return localVarResp.getData();
    }

    /**
     * Creates a new data request token for form authentication
     * 
     * @param dataRequestId  (required)
     * @return ApiResponse&lt;CreateSubmissionDataRequestTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> token created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSubmissionDataRequestTokenResponse> createDataRequestTokenWithHttpInfo(String dataRequestId) throws ApiException {
        okhttp3.Call localVarCall = createDataRequestTokenValidateBeforeCall(dataRequestId, null);
        try {
            Type localVarReturnType = new TypeToken<CreateSubmissionDataRequestTokenResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateSubmissionDataRequestTokenResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateSubmissionDataRequestTokenResponse>(){});
            throw e;
        }
    }

    /**
     * Creates a new data request token for form authentication (asynchronously)
     * 
     * @param dataRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> token created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRequestTokenAsync(String dataRequestId, final ApiCallback<CreateSubmissionDataRequestTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDataRequestTokenValidateBeforeCall(dataRequestId, _callback);
        Type localVarReturnType = new TypeToken<CreateSubmissionDataRequestTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFolder
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder created inside another folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(CreateFolderData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/folders/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(CreateFolderData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createFolder(Async)");
        }
        

        okhttp3.Call localVarCall = createFolderCall(data, _callback);
        return localVarCall;

    }

    /**
     * Create a folder
     * 
     * @param data  (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder created inside another folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Folder createFolder(CreateFolderData data) throws ApiException {
        ApiResponse<Folder> localVarResp = createFolderWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Create a folder
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder created inside another folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> createFolderWithHttpInfo(CreateFolderData data) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<Folder>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Folder>(){}.getType()));
            e.setErrorObjectType(new GenericType<Folder>(){});
            throw e;
        }
    }

    /**
     * Create a folder (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder created inside another folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(CreateFolderData data, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHTMLTemplate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a created template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHTMLTemplateCall(CreateHtmlTemplateData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates?desc=html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHTMLTemplateValidateBeforeCall(CreateHtmlTemplateData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createHTMLTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = createHTMLTemplateCall(data, _callback);
        return localVarCall;

    }

    /**
     * Create a new HTML template
     * 
     * @param data  (required)
     * @return PendingTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a created template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public PendingTemplate createHTMLTemplate(CreateHtmlTemplateData data) throws ApiException {
        ApiResponse<PendingTemplate> localVarResp = createHTMLTemplateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Create a new HTML template
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PendingTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a created template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingTemplate> createHTMLTemplateWithHttpInfo(CreateHtmlTemplateData data) throws ApiException {
        okhttp3.Call localVarCall = createHTMLTemplateValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PendingTemplate>(){}.getType()));
            e.setErrorObjectType(new GenericType<PendingTemplate>(){});
            throw e;
        }
    }

    /**
     * Create a new HTML template (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a created template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHTMLTemplateAsync(CreateHtmlTemplateData data, final ApiCallback<PendingTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHTMLTemplateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPDFTemplate
     * @param templateDocument  (required)
     * @param templateName  (required)
     * @param templateParentFolderId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPDFTemplateCall(File templateDocument, String templateName, String templateParentFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateDocument != null) {
            localVarFormParams.put("template[document]", templateDocument);
        }

        if (templateName != null) {
            localVarFormParams.put("template[name]", templateName);
        }

        if (templateParentFolderId != null) {
            localVarFormParams.put("template[parent_folder_id]", templateParentFolderId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPDFTemplateValidateBeforeCall(File templateDocument, String templateName, String templateParentFolderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateDocument' is set
        if (templateDocument == null) {
            throw new ApiException("Missing the required parameter 'templateDocument' when calling createPDFTemplate(Async)");
        }
        
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling createPDFTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = createPDFTemplateCall(templateDocument, templateName, templateParentFolderId, _callback);
        return localVarCall;

    }

    /**
     * Create a new PDF template with a form POST file upload
     * 
     * @param templateDocument  (required)
     * @param templateName  (required)
     * @param templateParentFolderId  (optional)
     * @return PendingTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public PendingTemplate createPDFTemplate(File templateDocument, String templateName, String templateParentFolderId) throws ApiException {
        ApiResponse<PendingTemplate> localVarResp = createPDFTemplateWithHttpInfo(templateDocument, templateName, templateParentFolderId);
        return localVarResp.getData();
    }

    /**
     * Create a new PDF template with a form POST file upload
     * 
     * @param templateDocument  (required)
     * @param templateName  (required)
     * @param templateParentFolderId  (optional)
     * @return ApiResponse&lt;PendingTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingTemplate> createPDFTemplateWithHttpInfo(File templateDocument, String templateName, String templateParentFolderId) throws ApiException {
        okhttp3.Call localVarCall = createPDFTemplateValidateBeforeCall(templateDocument, templateName, templateParentFolderId, null);
        try {
            Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PendingTemplate>(){}.getType()));
            e.setErrorObjectType(new GenericType<PendingTemplate>(){});
            throw e;
        }
    }

    /**
     * Create a new PDF template with a form POST file upload (asynchronously)
     * 
     * @param templateDocument  (required)
     * @param templateName  (required)
     * @param templateParentFolderId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPDFTemplateAsync(File templateDocument, String templateName, String templateParentFolderId, final ApiCallback<PendingTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPDFTemplateValidateBeforeCall(templateDocument, templateName, templateParentFolderId, _callback);
        Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPDFTemplateFromUpload
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPDFTemplateFromUploadCall(CreateTemplateFromUploadData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates?desc=cached_upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPDFTemplateFromUploadValidateBeforeCall(CreateTemplateFromUploadData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createPDFTemplateFromUpload(Async)");
        }
        

        okhttp3.Call localVarCall = createPDFTemplateFromUploadCall(data, _callback);
        return localVarCall;

    }

    /**
     * Create a new PDF template from a cached presign upload
     * 
     * @param data  (required)
     * @return PendingTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public PendingTemplate createPDFTemplateFromUpload(CreateTemplateFromUploadData data) throws ApiException {
        ApiResponse<PendingTemplate> localVarResp = createPDFTemplateFromUploadWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * Create a new PDF template from a cached presign upload
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PendingTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingTemplate> createPDFTemplateFromUploadWithHttpInfo(CreateTemplateFromUploadData data) throws ApiException {
        okhttp3.Call localVarCall = createPDFTemplateFromUploadValidateBeforeCall(data, null);
        try {
            Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PendingTemplate>(){}.getType()));
            e.setErrorObjectType(new GenericType<PendingTemplate>(){});
            throw e;
        }
    }

    /**
     * Create a new PDF template from a cached presign upload (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a pending template </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPDFTemplateFromUploadAsync(CreateTemplateFromUploadData data, final ApiCallback<PendingTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPDFTemplateFromUploadValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PendingTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param folderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> folder has contents </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}"
            .replaceAll("\\{" + "folder_id" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteFolder(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFolderCall(folderId, _callback);
        return localVarCall;

    }

    /**
     * Delete a folder
     * 
     * @param folderId  (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> folder has contents </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Folder deleteFolder(String folderId) throws ApiException {
        ApiResponse<Folder> localVarResp = deleteFolderWithHttpInfo(folderId);
        return localVarResp.getData();
    }

    /**
     * Delete a folder
     * 
     * @param folderId  (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> folder has contents </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> deleteFolderWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(folderId, null);
        try {
            Type localVarReturnType = new TypeToken<Folder>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Folder>(){}.getType()));
            e.setErrorObjectType(new GenericType<Folder>(){});
            throw e;
        }
    }

    /**
     * Delete a folder (asynchronously)
     * 
     * @param folderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> folder has contents </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> folder is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(String folderId, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expireCombinedSubmission
     * @param combinedSubmissionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireCombinedSubmissionCall(String combinedSubmissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/combined_submissions/{combined_submission_id}"
            .replaceAll("\\{" + "combined_submission_id" + "\\}", localVarApiClient.escapeString(combinedSubmissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expireCombinedSubmissionValidateBeforeCall(String combinedSubmissionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'combinedSubmissionId' is set
        if (combinedSubmissionId == null) {
            throw new ApiException("Missing the required parameter 'combinedSubmissionId' when calling expireCombinedSubmission(Async)");
        }
        

        okhttp3.Call localVarCall = expireCombinedSubmissionCall(combinedSubmissionId, _callback);
        return localVarCall;

    }

    /**
     * Expire a combined submission
     * 
     * @param combinedSubmissionId  (required)
     * @return CombinedSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CombinedSubmission expireCombinedSubmission(String combinedSubmissionId) throws ApiException {
        ApiResponse<CombinedSubmission> localVarResp = expireCombinedSubmissionWithHttpInfo(combinedSubmissionId);
        return localVarResp.getData();
    }

    /**
     * Expire a combined submission
     * 
     * @param combinedSubmissionId  (required)
     * @return ApiResponse&lt;CombinedSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CombinedSubmission> expireCombinedSubmissionWithHttpInfo(String combinedSubmissionId) throws ApiException {
        okhttp3.Call localVarCall = expireCombinedSubmissionValidateBeforeCall(combinedSubmissionId, null);
        try {
            Type localVarReturnType = new TypeToken<CombinedSubmission>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CombinedSubmission>(){}.getType()));
            e.setErrorObjectType(new GenericType<CombinedSubmission>(){});
            throw e;
        }
    }

    /**
     * Expire a combined submission (asynchronously)
     * 
     * @param combinedSubmissionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireCombinedSubmissionAsync(String combinedSubmissionId, final ApiCallback<CombinedSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = expireCombinedSubmissionValidateBeforeCall(combinedSubmissionId, _callback);
        Type localVarReturnType = new TypeToken<CombinedSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expireSubmission
     * @param submissionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireSubmissionCall(String submissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/{submission_id}"
            .replaceAll("\\{" + "submission_id" + "\\}", localVarApiClient.escapeString(submissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expireSubmissionValidateBeforeCall(String submissionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'submissionId' is set
        if (submissionId == null) {
            throw new ApiException("Missing the required parameter 'submissionId' when calling expireSubmission(Async)");
        }
        

        okhttp3.Call localVarCall = expireSubmissionCall(submissionId, _callback);
        return localVarCall;

    }

    /**
     * Expire a PDF submission
     * 
     * @param submissionId  (required)
     * @return Submission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
     </table>
     */
    public Submission expireSubmission(String submissionId) throws ApiException {
        ApiResponse<Submission> localVarResp = expireSubmissionWithHttpInfo(submissionId);
        return localVarResp.getData();
    }

    /**
     * Expire a PDF submission
     * 
     * @param submissionId  (required)
     * @return ApiResponse&lt;Submission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Submission> expireSubmissionWithHttpInfo(String submissionId) throws ApiException {
        okhttp3.Call localVarCall = expireSubmissionValidateBeforeCall(submissionId, null);
        try {
            Type localVarReturnType = new TypeToken<Submission>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Submission>(){}.getType()));
            e.setErrorObjectType(new GenericType<Submission>(){});
            throw e;
        }
    }

    /**
     * Expire a PDF submission (asynchronously)
     * 
     * @param submissionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission was expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> test API token used </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireSubmissionAsync(String submissionId, final ApiCallback<Submission> _callback) throws ApiException {

        okhttp3.Call localVarCall = expireSubmissionValidateBeforeCall(submissionId, _callback);
        Type localVarReturnType = new TypeToken<Submission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generatePDF
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submission created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePDFCall(String templateId, SubmissionData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/submissions"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePDFValidateBeforeCall(String templateId, SubmissionData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling generatePDF(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling generatePDF(Async)");
        }
        

        okhttp3.Call localVarCall = generatePDFCall(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Generates a new PDF
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return CreateSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submission created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubmissionResponse generatePDF(String templateId, SubmissionData data) throws ApiException {
        ApiResponse<CreateSubmissionResponse> localVarResp = generatePDFWithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Generates a new PDF
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;CreateSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submission created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSubmissionResponse> generatePDFWithHttpInfo(String templateId, SubmissionData data) throws ApiException {
        okhttp3.Call localVarCall = generatePDFValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<CreateSubmissionResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CreateSubmissionResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<CreateSubmissionResponse>(){});
            throw e;
        }
    }

    /**
     * Generates a new PDF (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> submission created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePDFAsync(String templateId, SubmissionData data, final ApiCallback<CreateSubmissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePDFValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<CreateSubmissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCombinedSubmission
     * @param combinedSubmissionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed combined submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCombinedSubmissionCall(String combinedSubmissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/combined_submissions/{combined_submission_id}"
            .replaceAll("\\{" + "combined_submission_id" + "\\}", localVarApiClient.escapeString(combinedSubmissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCombinedSubmissionValidateBeforeCall(String combinedSubmissionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'combinedSubmissionId' is set
        if (combinedSubmissionId == null) {
            throw new ApiException("Missing the required parameter 'combinedSubmissionId' when calling getCombinedSubmission(Async)");
        }
        

        okhttp3.Call localVarCall = getCombinedSubmissionCall(combinedSubmissionId, _callback);
        return localVarCall;

    }

    /**
     * Check the status of a combined submission (merged PDFs)
     * 
     * @param combinedSubmissionId  (required)
     * @return CombinedSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed combined submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public CombinedSubmission getCombinedSubmission(String combinedSubmissionId) throws ApiException {
        ApiResponse<CombinedSubmission> localVarResp = getCombinedSubmissionWithHttpInfo(combinedSubmissionId);
        return localVarResp.getData();
    }

    /**
     * Check the status of a combined submission (merged PDFs)
     * 
     * @param combinedSubmissionId  (required)
     * @return ApiResponse&lt;CombinedSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed combined submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CombinedSubmission> getCombinedSubmissionWithHttpInfo(String combinedSubmissionId) throws ApiException {
        okhttp3.Call localVarCall = getCombinedSubmissionValidateBeforeCall(combinedSubmissionId, null);
        try {
            Type localVarReturnType = new TypeToken<CombinedSubmission>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<CombinedSubmission>(){}.getType()));
            e.setErrorObjectType(new GenericType<CombinedSubmission>(){});
            throw e;
        }
    }

    /**
     * Check the status of a combined submission (merged PDFs) (asynchronously)
     * 
     * @param combinedSubmissionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed combined submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> combined submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCombinedSubmissionAsync(String combinedSubmissionId, final ApiCallback<CombinedSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCombinedSubmissionValidateBeforeCall(combinedSubmissionId, _callback);
        Type localVarReturnType = new TypeToken<CombinedSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataRequest
     * @param dataRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> completed submission data request found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataRequestCall(String dataRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data_requests/{data_request_id}"
            .replaceAll("\\{" + "data_request_id" + "\\}", localVarApiClient.escapeString(dataRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataRequestValidateBeforeCall(String dataRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataRequestId' is set
        if (dataRequestId == null) {
            throw new ApiException("Missing the required parameter 'dataRequestId' when calling getDataRequest(Async)");
        }
        

        okhttp3.Call localVarCall = getDataRequestCall(dataRequestId, _callback);
        return localVarCall;

    }

    /**
     * Look up a submission data request
     * 
     * @param dataRequestId  (required)
     * @return SubmissionDataRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> completed submission data request found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public SubmissionDataRequest getDataRequest(String dataRequestId) throws ApiException {
        ApiResponse<SubmissionDataRequest> localVarResp = getDataRequestWithHttpInfo(dataRequestId);
        return localVarResp.getData();
    }

    /**
     * Look up a submission data request
     * 
     * @param dataRequestId  (required)
     * @return ApiResponse&lt;SubmissionDataRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> completed submission data request found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmissionDataRequest> getDataRequestWithHttpInfo(String dataRequestId) throws ApiException {
        okhttp3.Call localVarCall = getDataRequestValidateBeforeCall(dataRequestId, null);
        try {
            Type localVarReturnType = new TypeToken<SubmissionDataRequest>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SubmissionDataRequest>(){}.getType()));
            e.setErrorObjectType(new GenericType<SubmissionDataRequest>(){});
            throw e;
        }
    }

    /**
     * Look up a submission data request (asynchronously)
     * 
     * @param dataRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> completed submission data request found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataRequestAsync(String dataRequestId, final ApiCallback<SubmissionDataRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataRequestValidateBeforeCall(dataRequestId, _callback);
        Type localVarReturnType = new TypeToken<SubmissionDataRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFullTemplate
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFullTemplateCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}?full=true"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFullTemplateValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getFullTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = getFullTemplateCall(templateId, _callback);
        return localVarCall;

    }

    /**
     * Fetch the full template attributes
     * 
     * @param templateId  (required)
     * @return Template1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Template1 getFullTemplate(String templateId) throws ApiException {
        ApiResponse<Template1> localVarResp = getFullTemplateWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Fetch the full template attributes
     * 
     * @param templateId  (required)
     * @return ApiResponse&lt;Template1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template1> getFullTemplateWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getFullTemplateValidateBeforeCall(templateId, null);
        try {
            Type localVarReturnType = new TypeToken<Template1>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Template1>(){}.getType()));
            e.setErrorObjectType(new GenericType<Template1>(){});
            throw e;
        }
    }

    /**
     * Fetch the full template attributes (asynchronously)
     * 
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFullTemplateAsync(String templateId, final ApiCallback<Template1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFullTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Template1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPresignUrl
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> presign URL generated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPresignUrlCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/presign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPresignUrlValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPresignUrlCall(_callback);
        return localVarCall;

    }

    /**
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket
     * 
     * @return UploadPresign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> presign URL generated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public UploadPresign getPresignUrl() throws ApiException {
        ApiResponse<UploadPresign> localVarResp = getPresignUrlWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket
     * 
     * @return ApiResponse&lt;UploadPresign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> presign URL generated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadPresign> getPresignUrlWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPresignUrlValidateBeforeCall(null);
        try {
            Type localVarReturnType = new TypeToken<UploadPresign>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<UploadPresign>(){}.getType()));
            e.setErrorObjectType(new GenericType<UploadPresign>(){});
            throw e;
        }
    }

    /**
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> presign URL generated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPresignUrlAsync(final ApiCallback<UploadPresign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPresignUrlValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UploadPresign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmission
     * @param submissionId  (required)
     * @param includeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionCall(String submissionId, Boolean includeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/{submission_id}"
            .replaceAll("\\{" + "submission_id" + "\\}", localVarApiClient.escapeString(submissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_data", includeData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionValidateBeforeCall(String submissionId, Boolean includeData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'submissionId' is set
        if (submissionId == null) {
            throw new ApiException("Missing the required parameter 'submissionId' when calling getSubmission(Async)");
        }
        

        okhttp3.Call localVarCall = getSubmissionCall(submissionId, includeData, _callback);
        return localVarCall;

    }

    /**
     * Check the status of a PDF
     * 
     * @param submissionId  (required)
     * @param includeData  (optional)
     * @return Submission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Submission getSubmission(String submissionId, Boolean includeData) throws ApiException {
        ApiResponse<Submission> localVarResp = getSubmissionWithHttpInfo(submissionId, includeData);
        return localVarResp.getData();
    }

    /**
     * Check the status of a PDF
     * 
     * @param submissionId  (required)
     * @param includeData  (optional)
     * @return ApiResponse&lt;Submission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Submission> getSubmissionWithHttpInfo(String submissionId, Boolean includeData) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionValidateBeforeCall(submissionId, includeData, null);
        try {
            Type localVarReturnType = new TypeToken<Submission>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Submission>(){}.getType()));
            e.setErrorObjectType(new GenericType<Submission>(){});
            throw e;
        }
    }

    /**
     * Check the status of a PDF (asynchronously)
     * 
     * @param submissionId  (required)
     * @param includeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionAsync(String submissionId, Boolean includeData, final ApiCallback<Submission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionValidateBeforeCall(submissionId, includeData, _callback);
        Type localVarReturnType = new TypeToken<Submission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmissionBatch
     * @param submissionBatchId  (required)
     * @param includeSubmissions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission batch found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission batch not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionBatchCall(String submissionBatchId, Boolean includeSubmissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/batches/{submission_batch_id}"
            .replaceAll("\\{" + "submission_batch_id" + "\\}", localVarApiClient.escapeString(submissionBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSubmissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_submissions", includeSubmissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionBatchValidateBeforeCall(String submissionBatchId, Boolean includeSubmissions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'submissionBatchId' is set
        if (submissionBatchId == null) {
            throw new ApiException("Missing the required parameter 'submissionBatchId' when calling getSubmissionBatch(Async)");
        }
        

        okhttp3.Call localVarCall = getSubmissionBatchCall(submissionBatchId, includeSubmissions, _callback);
        return localVarCall;

    }

    /**
     * Check the status of a submission batch job
     * 
     * @param submissionBatchId  (required)
     * @param includeSubmissions  (optional)
     * @return SubmissionBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission batch found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission batch not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public SubmissionBatch getSubmissionBatch(String submissionBatchId, Boolean includeSubmissions) throws ApiException {
        ApiResponse<SubmissionBatch> localVarResp = getSubmissionBatchWithHttpInfo(submissionBatchId, includeSubmissions);
        return localVarResp.getData();
    }

    /**
     * Check the status of a submission batch job
     * 
     * @param submissionBatchId  (required)
     * @param includeSubmissions  (optional)
     * @return ApiResponse&lt;SubmissionBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission batch found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission batch not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmissionBatch> getSubmissionBatchWithHttpInfo(String submissionBatchId, Boolean includeSubmissions) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionBatchValidateBeforeCall(submissionBatchId, includeSubmissions, null);
        try {
            Type localVarReturnType = new TypeToken<SubmissionBatch>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SubmissionBatch>(){}.getType()));
            e.setErrorObjectType(new GenericType<SubmissionBatch>(){});
            throw e;
        }
    }

    /**
     * Check the status of a submission batch job (asynchronously)
     * 
     * @param submissionBatchId  (required)
     * @param includeSubmissions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> processed submission batch found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission batch not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionBatchAsync(String submissionBatchId, Boolean includeSubmissions, final ApiCallback<SubmissionBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionBatchValidateBeforeCall(submissionBatchId, includeSubmissions, _callback);
        Type localVarReturnType = new TypeToken<SubmissionBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplate
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = getTemplateCall(templateId, _callback);
        return localVarCall;

    }

    /**
     * Check the status of an uploaded template
     * 
     * @param templateId  (required)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Template getTemplate(String templateId) throws ApiException {
        ApiResponse<Template> localVarResp = getTemplateWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Check the status of an uploaded template
     * 
     * @param templateId  (required)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template> getTemplateWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateValidateBeforeCall(templateId, null);
        try {
            Type localVarReturnType = new TypeToken<Template>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Template>(){}.getType()));
            e.setErrorObjectType(new GenericType<Template>(){});
            throw e;
        }
    }

    /**
     * Check the status of an uploaded template (asynchronously)
     * 
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateAsync(String templateId, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateSchema
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateSchemaCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/schema"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateSchemaValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateSchema(Async)");
        }
        

        okhttp3.Call localVarCall = getTemplateSchemaCall(templateId, _callback);
        return localVarCall;

    }

    /**
     * Fetch the JSON schema for a template
     * 
     * @param templateId  (required)
     * @return TemplateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public TemplateSchema getTemplateSchema(String templateId) throws ApiException {
        ApiResponse<TemplateSchema> localVarResp = getTemplateSchemaWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Fetch the JSON schema for a template
     * 
     * @param templateId  (required)
     * @return ApiResponse&lt;TemplateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateSchema> getTemplateSchemaWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateSchemaValidateBeforeCall(templateId, null);
        try {
            Type localVarReturnType = new TypeToken<TemplateSchema>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<TemplateSchema>(){}.getType()));
            e.setErrorObjectType(new GenericType<TemplateSchema>(){});
            throw e;
        }
    }

    /**
     * Fetch the JSON schema for a template (asynchronously)
     * 
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> template not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateSchemaAsync(String templateId, final ApiCallback<TemplateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateSchemaValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFolders
     * @param parentFolderId Filter By Folder Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all folders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersCall(String parentFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentFolderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_folder_id", parentFolderId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFoldersValidateBeforeCall(String parentFolderId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listFoldersCall(parentFolderId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of all folders
     * 
     * @param parentFolderId Filter By Folder Id (optional)
     * @return List&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all folders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public List<Folder> listFolders(String parentFolderId) throws ApiException {
        ApiResponse<List<Folder>> localVarResp = listFoldersWithHttpInfo(parentFolderId);
        return localVarResp.getData();
    }

    /**
     * Get a list of all folders
     * 
     * @param parentFolderId Filter By Folder Id (optional)
     * @return ApiResponse&lt;List&lt;Folder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all folders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Folder>> listFoldersWithHttpInfo(String parentFolderId) throws ApiException {
        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(parentFolderId, null);
        try {
            Type localVarReturnType = new TypeToken<List<Folder>>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<List<Folder>>(){}.getType()));
            e.setErrorObjectType(new GenericType<List<Folder>>(){});
            throw e;
        }
    }

    /**
     * Get a list of all folders (asynchronously)
     * 
     * @param parentFolderId Filter By Folder Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all folders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersAsync(String parentFolderId, final ApiCallback<List<Folder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(parentFolderId, _callback);
        Type localVarReturnType = new TypeToken<List<Folder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubmissions
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubmissionsCall(String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_data", includeData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubmissionsValidateBeforeCall(String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listSubmissionsCall(cursor, limit, createdAfter, createdBefore, type, includeData, _callback);
        return localVarCall;

    }

    /**
     * List all submissions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @return ListSubmissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ListSubmissionsResponse listSubmissions(String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData) throws ApiException {
        ApiResponse<ListSubmissionsResponse> localVarResp = listSubmissionsWithHttpInfo(cursor, limit, createdAfter, createdBefore, type, includeData);
        return localVarResp.getData();
    }

    /**
     * List all submissions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @return ApiResponse&lt;ListSubmissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubmissionsResponse> listSubmissionsWithHttpInfo(String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData) throws ApiException {
        okhttp3.Call localVarCall = listSubmissionsValidateBeforeCall(cursor, limit, createdAfter, createdBefore, type, includeData, null);
        try {
            Type localVarReturnType = new TypeToken<ListSubmissionsResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<ListSubmissionsResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<ListSubmissionsResponse>(){});
            throw e;
        }
    }

    /**
     * List all submissions (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubmissionsAsync(String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback<ListSubmissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubmissionsValidateBeforeCall(cursor, limit, createdAfter, createdBefore, type, includeData, _callback);
        Type localVarReturnType = new TypeToken<ListSubmissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubmissionsForTemplate
     * @param templateId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> invalid template id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubmissionsForTemplateCall(String templateId, String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/submissions"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_data", includeData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubmissionsForTemplateValidateBeforeCall(String templateId, String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling listSubmissionsForTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = listSubmissionsForTemplateCall(templateId, cursor, limit, createdAfter, createdBefore, type, includeData, _callback);
        return localVarCall;

    }

    /**
     * List all submissions for a given template
     * 
     * @param templateId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @return ListSubmissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> invalid template id </td><td>  -  </td></tr>
     </table>
     */
    public ListSubmissionsResponse listSubmissionsForTemplate(String templateId, String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData) throws ApiException {
        ApiResponse<ListSubmissionsResponse> localVarResp = listSubmissionsForTemplateWithHttpInfo(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
        return localVarResp.getData();
    }

    /**
     * List all submissions for a given template
     * 
     * @param templateId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @return ApiResponse&lt;ListSubmissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> invalid template id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubmissionsResponse> listSubmissionsForTemplateWithHttpInfo(String templateId, String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData) throws ApiException {
        okhttp3.Call localVarCall = listSubmissionsForTemplateValidateBeforeCall(templateId, cursor, limit, createdAfter, createdBefore, type, includeData, null);
        try {
            Type localVarReturnType = new TypeToken<ListSubmissionsResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<ListSubmissionsResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<ListSubmissionsResponse>(){});
            throw e;
        }
    }

    /**
     * List all submissions for a given template (asynchronously)
     * 
     * @param templateId  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param type  (optional)
     * @param includeData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listing submissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> invalid template id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubmissionsForTemplateAsync(String templateId, String cursor, BigDecimal limit, String createdAfter, String createdBefore, String type, Boolean includeData, final ApiCallback<ListSubmissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubmissionsForTemplateValidateBeforeCall(templateId, cursor, limit, createdAfter, createdBefore, type, includeData, _callback);
        Type localVarReturnType = new TypeToken<ListSubmissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplates
     * @param query Search By Name (optional)
     * @param parentFolderId Filter By Folder Id (optional)
     * @param page Default: 1 (optional)
     * @param perPage Default: 50 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all templates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> filter templates by invalid folder id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesCall(String query, String parentFolderId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (parentFolderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_folder_id", parentFolderId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(String query, String parentFolderId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTemplatesCall(query, parentFolderId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of all templates
     * 
     * @param query Search By Name (optional)
     * @param parentFolderId Filter By Folder Id (optional)
     * @param page Default: 1 (optional)
     * @param perPage Default: 50 (optional)
     * @return List&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all templates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> filter templates by invalid folder id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public List<Template> listTemplates(String query, String parentFolderId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Template>> localVarResp = listTemplatesWithHttpInfo(query, parentFolderId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of all templates
     * 
     * @param query Search By Name (optional)
     * @param parentFolderId Filter By Folder Id (optional)
     * @param page Default: 1 (optional)
     * @param perPage Default: 50 (optional)
     * @return ApiResponse&lt;List&lt;Template&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all templates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> filter templates by invalid folder id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Template>> listTemplatesWithHttpInfo(String query, String parentFolderId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(query, parentFolderId, page, perPage, null);
        try {
            Type localVarReturnType = new TypeToken<List<Template>>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<List<Template>>(){}.getType()));
            e.setErrorObjectType(new GenericType<List<Template>>(){});
            throw e;
        }
    }

    /**
     * Get a list of all templates (asynchronously)
     * 
     * @param query Search By Name (optional)
     * @param parentFolderId Filter By Folder Id (optional)
     * @param page Default: 1 (optional)
     * @param perPage Default: 50 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> enumerate all templates </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> filter templates by invalid folder id </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesAsync(String query, String parentFolderId, Integer page, Integer perPage, final ApiCallback<List<Template>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(query, parentFolderId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Template>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveFolderToFolder
     * @param folderId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> move to root folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveFolderToFolderCall(String folderId, MoveFolderData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/move"
            .replaceAll("\\{" + "folder_id" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveFolderToFolderValidateBeforeCall(String folderId, MoveFolderData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling moveFolderToFolder(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling moveFolderToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = moveFolderToFolderCall(folderId, data, _callback);
        return localVarCall;

    }

    /**
     * Move a folder
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> move to root folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public Folder moveFolderToFolder(String folderId, MoveFolderData data) throws ApiException {
        ApiResponse<Folder> localVarResp = moveFolderToFolderWithHttpInfo(folderId, data);
        return localVarResp.getData();
    }

    /**
     * Move a folder
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> move to root folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> moveFolderToFolderWithHttpInfo(String folderId, MoveFolderData data) throws ApiException {
        okhttp3.Call localVarCall = moveFolderToFolderValidateBeforeCall(folderId, data, null);
        try {
            Type localVarReturnType = new TypeToken<Folder>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Folder>(){}.getType()));
            e.setErrorObjectType(new GenericType<Folder>(){});
            throw e;
        }
    }

    /**
     * Move a folder (asynchronously)
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> parent folder doesnt exist </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> move to root folder </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveFolderToFolderAsync(String folderId, MoveFolderData data, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveFolderToFolderValidateBeforeCall(folderId, data, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveTemplateToFolder
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> move template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveTemplateToFolderCall(String templateId, MoveTemplateData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}/move"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveTemplateToFolderValidateBeforeCall(String templateId, MoveTemplateData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling moveTemplateToFolder(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling moveTemplateToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = moveTemplateToFolderCall(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Move Template to folder
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> move template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public Template moveTemplateToFolder(String templateId, MoveTemplateData data) throws ApiException {
        ApiResponse<Template> localVarResp = moveTemplateToFolderWithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Move Template to folder
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> move template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Template> moveTemplateToFolderWithHttpInfo(String templateId, MoveTemplateData data) throws ApiException {
        okhttp3.Call localVarCall = moveTemplateToFolderValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<Template>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Template>(){}.getType()));
            e.setErrorObjectType(new GenericType<Template>(){});
            throw e;
        }
    }

    /**
     * Move Template to folder (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> move template success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveTemplateToFolderAsync(String templateId, MoveTemplateData data, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveTemplateToFolderValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameFolder
     * @param folderId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder doesnt belong to me </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful rename </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameFolderCall(String folderId, RenameFolderData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/rename"
            .replaceAll("\\{" + "folder_id" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameFolderValidateBeforeCall(String folderId, RenameFolderData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling renameFolder(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling renameFolder(Async)");
        }
        

        okhttp3.Call localVarCall = renameFolderCall(folderId, data, _callback);
        return localVarCall;

    }

    /**
     * Rename a folder
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder doesnt belong to me </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful rename </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public void renameFolder(String folderId, RenameFolderData data) throws ApiException {
        renameFolderWithHttpInfo(folderId, data);
    }

    /**
     * Rename a folder
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder doesnt belong to me </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful rename </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameFolderWithHttpInfo(String folderId, RenameFolderData data) throws ApiException {
        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(folderId, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename a folder (asynchronously)
     * 
     * @param folderId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 422 </td><td> name already exist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> folder doesnt belong to me </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful rename </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameFolderAsync(String folderId, RenameFolderData data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(folderId, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testAuthentication
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authentication succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testAuthenticationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testAuthenticationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = testAuthenticationCall(_callback);
        return localVarCall;

    }

    /**
     * Test Authentication
     * 
     * @return AuthenticationSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authentication succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationSuccessResponse testAuthentication() throws ApiException {
        ApiResponse<AuthenticationSuccessResponse> localVarResp = testAuthenticationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Test Authentication
     * 
     * @return ApiResponse&lt;AuthenticationSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authentication succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationSuccessResponse> testAuthenticationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = testAuthenticationValidateBeforeCall(null);
        try {
            Type localVarReturnType = new TypeToken<AuthenticationSuccessResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AuthenticationSuccessResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<AuthenticationSuccessResponse>(){});
            throw e;
        }
    }

    /**
     * Test Authentication (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authentication succeeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testAuthenticationAsync(final ApiCallback<AuthenticationSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testAuthenticationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AuthenticationSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataRequest
     * @param dataRequestId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission data request updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataRequestCall(String dataRequestId, UpdateSubmissionDataRequestData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/data_requests/{data_request_id}"
            .replaceAll("\\{" + "data_request_id" + "\\}", localVarApiClient.escapeString(dataRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataRequestValidateBeforeCall(String dataRequestId, UpdateSubmissionDataRequestData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataRequestId' is set
        if (dataRequestId == null) {
            throw new ApiException("Missing the required parameter 'dataRequestId' when calling updateDataRequest(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateDataRequest(Async)");
        }
        

        okhttp3.Call localVarCall = updateDataRequestCall(dataRequestId, data, _callback);
        return localVarCall;

    }

    /**
     * Update a submission data request
     * 
     * @param dataRequestId  (required)
     * @param data  (required)
     * @return UpdateDataRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission data request updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDataRequestResponse updateDataRequest(String dataRequestId, UpdateSubmissionDataRequestData data) throws ApiException {
        ApiResponse<UpdateDataRequestResponse> localVarResp = updateDataRequestWithHttpInfo(dataRequestId, data);
        return localVarResp.getData();
    }

    /**
     * Update a submission data request
     * 
     * @param dataRequestId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;UpdateDataRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission data request updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDataRequestResponse> updateDataRequestWithHttpInfo(String dataRequestId, UpdateSubmissionDataRequestData data) throws ApiException {
        okhttp3.Call localVarCall = updateDataRequestValidateBeforeCall(dataRequestId, data, null);
        try {
            Type localVarReturnType = new TypeToken<UpdateDataRequestResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<UpdateDataRequestResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<UpdateDataRequestResponse>(){});
            throw e;
        }
    }

    /**
     * Update a submission data request (asynchronously)
     * 
     * @param dataRequestId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> submission data request updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> submission data request not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> authentication failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataRequestAsync(String dataRequestId, UpdateSubmissionDataRequestData data, final ApiCallback<UpdateDataRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataRequestValidateBeforeCall(dataRequestId, data, _callback);
        Type localVarReturnType = new TypeToken<UpdateDataRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplate
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update template success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCall(String templateId, UpdateTemplateData data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/templates/{template_id}"
            .replaceAll("\\{" + "template_id" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token_basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateValidateBeforeCall(String templateId, UpdateTemplateData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateTemplate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = updateTemplateCall(templateId, data, _callback);
        return localVarCall;

    }

    /**
     * Update a Template
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return UpdateTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update template success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateResponse updateTemplate(String templateId, UpdateTemplateData data) throws ApiException {
        ApiResponse<UpdateTemplateResponse> localVarResp = updateTemplateWithHttpInfo(templateId, data);
        return localVarResp.getData();
    }

    /**
     * Update a Template
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;UpdateTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update template success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTemplateResponse> updateTemplateWithHttpInfo(String templateId, UpdateTemplateData data) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(templateId, data, null);
        try {
            Type localVarReturnType = new TypeToken<UpdateTemplateResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<UpdateTemplateResponse>(){}.getType()));
            e.setErrorObjectType(new GenericType<UpdateTemplateResponse>(){});
            throw e;
        }
    }

    /**
     * Update a Template (asynchronously)
     * 
     * @param templateId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update template success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateAsync(String templateId, UpdateTemplateData data, final ApiCallback<UpdateTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(templateId, data, _callback);
        Type localVarReturnType = new TypeToken<UpdateTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
